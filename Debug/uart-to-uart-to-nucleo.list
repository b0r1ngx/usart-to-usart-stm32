
uart-to-uart-to-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf4  08003bf4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf4  08003bf4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf4  08003bf4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000013c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a5a4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001aa7  00000000  00000000  0002a623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000770  00000000  00000000  0002c0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005af  00000000  00000000  0002c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f363  00000000  00000000  0002cdef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a5a4  00000000  00000000  0004c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b9159  00000000  00000000  000566f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ce4  00000000  00000000  0010f850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00111534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ba4 	.word	0x08003ba4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ba4 	.word	0x08003ba4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fabd 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f82d 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8e9 	bl	80003ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001da:	f000 f887 	bl	80002ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f8b5 	bl	800034c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  for (unsigned char i = 0; i < BUFFER_SIZE; i++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	e00c      	b.n	8000202 <main+0x3a>
  	  transmitBuffer[i] = i + 1;
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	79fa      	ldrb	r2, [r7, #7]
 80001ec:	3201      	adds	r2, #1
 80001ee:	b2d1      	uxtb	r1, r2
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <main+0x58>)
 80001f2:	54d1      	strb	r1, [r2, r3]
  	  receiveBuffer[i] = 0;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <main+0x5c>)
 80001f8:	2100      	movs	r1, #0
 80001fa:	54d1      	strb	r1, [r2, r3]
  for (unsigned char i = 0; i < BUFFER_SIZE; i++) {
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	3301      	adds	r3, #1
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2b03      	cmp	r3, #3
 8000206:	d9ef      	bls.n	80001e8 <main+0x20>
  }
  HAL_UART_Receive_IT(&huart1, receiveBuffer, BUFFER_SIZE);
 8000208:	2204      	movs	r2, #4
 800020a:	4906      	ldr	r1, [pc, #24]	; (8000224 <main+0x5c>)
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <main+0x60>)
 800020e:	f002 fa9d 	bl	800274c <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart2, transmitBuffer, BUFFER_SIZE);
 8000212:	2204      	movs	r2, #4
 8000214:	4902      	ldr	r1, [pc, #8]	; (8000220 <main+0x58>)
 8000216:	4805      	ldr	r0, [pc, #20]	; (800022c <main+0x64>)
 8000218:	f002 fa3a 	bl	8002690 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x54>
 800021e:	bf00      	nop
 8000220:	20000138 	.word	0x20000138
 8000224:	2000013c 	.word	0x2000013c
 8000228:	20000028 	.word	0x20000028
 800022c:	200000b0 	.word	0x200000b0

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 fc84 	bl	8003b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 031c 	add.w	r3, r7, #28
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000280:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000282:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000286:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fe07 	bl	8000ea0 <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000298:	f000 f928 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002a8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 031c 	add.w	r3, r7, #28
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fe2e 	bl	8001f1c <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002c6:	f000 f911 	bl	80004ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 f857 	bl	8002388 <HAL_RCCEx_PeriphCLKConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002e0:	f000 f904 	bl	80004ec <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3758      	adds	r7, #88	; 0x58
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f0:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_USART1_UART_Init+0x58>)
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <MX_USART1_UART_Init+0x5c>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80002f6:	4b13      	ldr	r3, [pc, #76]	; (8000344 <MX_USART1_UART_Init+0x58>)
 80002f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_USART1_UART_Init+0x58>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART1_UART_Init+0x58>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_USART1_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000330:	f002 f960 	bl	80025f4 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800033a:	f000 f8d7 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000028 	.word	0x20000028
 8000348:	40013800 	.word	0x40013800

0800034c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000352:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <MX_USART2_UART_Init+0x5c>)
 8000354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000358:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800035c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000390:	f002 f930 	bl	80025f4 <HAL_UART_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800039a:	f000 f8a7 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000b0 	.word	0x200000b0
 80003a8:	40004400 	.word	0x40004400

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 030c 	add.w	r3, r7, #12
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a28      	ldr	r2, [pc, #160]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b26      	ldr	r3, [pc, #152]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003da:	4b23      	ldr	r3, [pc, #140]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a22      	ldr	r2, [pc, #136]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_GPIO_Init+0xbc>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2120      	movs	r1, #32
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f000 fcfb 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800041c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000422:	2301      	movs	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	4619      	mov	r1, r3
 800042c:	480f      	ldr	r0, [pc, #60]	; (800046c <MX_GPIO_Init+0xc0>)
 800042e:	f000 fb7b 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000432:	2320      	movs	r3, #32
 8000434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	4619      	mov	r1, r3
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f000 fb6c 	bl	8000b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	2028      	movs	r0, #40	; 0x28
 8000456:	f000 faba 	bl	80009ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800045a:	2028      	movs	r0, #40	; 0x28
 800045c:	f000 fad3 	bl	8000a06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	48000800 	.word	0x48000800

08000470 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Для того, чтобы отследить момент окончания передачи, либо приема существуют callback-функции:
// При дебаге, внутри колбэк функций, время таймера отличается от реального
// (то есть в колбэке может пройти 100 итераций, а дебаг захватит только 1)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <HAL_UART_RxCpltCallback+0x24>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d102      	bne.n	8000488 <HAL_UART_RxCpltCallback+0x18>
	  // USART1 завершил прием данных
	  isReceived = true;
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_UART_RxCpltCallback+0x28>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
  }
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40013800 	.word	0x40013800
 8000498:	20000140 	.word	0x20000140

0800049c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <HAL_UART_TxCpltCallback+0x24>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d102      	bne.n	80004b4 <HAL_UART_TxCpltCallback+0x18>
	  // USART2 завершил отправку данных
	  isTransive = true;
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <HAL_UART_TxCpltCallback+0x28>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
  }
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40004400 	.word	0x40004400
 80004c4:	20000141 	.word	0x20000141

080004c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
//
//    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
//
//  }
//
	if (GPIO_Pin== GPIO_PIN_13) {
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d8:	d104      	bne.n	80004e4 <HAL_GPIO_EXTI_Callback+0x1c>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004da:	2120      	movs	r1, #32
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e0:	f000 fcac 	bl	8000e3c <HAL_GPIO_TogglePin>
  } // else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <HAL_MspInit+0x44>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <HAL_MspInit+0x44>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <HAL_MspInit+0x44>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_MspInit+0x44>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <HAL_MspInit+0x44>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_MspInit+0x44>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	; 0x30
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 031c 	add.w	r3, r7, #28
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a36      	ldr	r2, [pc, #216]	; (8000638 <HAL_UART_MspInit+0xf8>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d130      	bne.n	80005c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <HAL_UART_MspInit+0xfc>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a35      	ldr	r2, [pc, #212]	; (800063c <HAL_UART_MspInit+0xfc>)
 8000568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <HAL_UART_MspInit+0xfc>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000576:	61bb      	str	r3, [r7, #24]
 8000578:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b30      	ldr	r3, [pc, #192]	; (800063c <HAL_UART_MspInit+0xfc>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a2f      	ldr	r2, [pc, #188]	; (800063c <HAL_UART_MspInit+0xfc>)
 8000580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b2d      	ldr	r3, [pc, #180]	; (800063c <HAL_UART_MspInit+0xfc>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000592:	2330      	movs	r3, #48	; 0x30
 8000594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005a2:	2307      	movs	r3, #7
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	4619      	mov	r1, r3
 80005ac:	4824      	ldr	r0, [pc, #144]	; (8000640 <HAL_UART_MspInit+0x100>)
 80005ae:	f000 fabb 	bl	8000b28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2025      	movs	r0, #37	; 0x25
 80005b8:	f000 fa09 	bl	80009ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005bc:	2025      	movs	r0, #37	; 0x25
 80005be:	f000 fa22 	bl	8000a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005c2:	e035      	b.n	8000630 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <HAL_UART_MspInit+0x104>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d130      	bne.n	8000630 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <HAL_UART_MspInit+0xfc>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_UART_MspInit+0xfc>)
 80005d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <HAL_UART_MspInit+0xfc>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_UART_MspInit+0xfc>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_UART_MspInit+0xfc>)
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_UART_MspInit+0xfc>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005fe:	230c      	movs	r3, #12
 8000600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800060e:	2307      	movs	r3, #7
 8000610:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f000 fa84 	bl	8000b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2026      	movs	r0, #38	; 0x26
 8000626:	f000 f9d2 	bl	80009ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800062a:	2026      	movs	r0, #38	; 0x26
 800062c:	f000 f9eb 	bl	8000a06 <HAL_NVIC_EnableIRQ>
}
 8000630:	bf00      	nop
 8000632:	3730      	adds	r7, #48	; 0x30
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40013800 	.word	0x40013800
 800063c:	40021000 	.word	0x40021000
 8000640:	48000800 	.word	0x48000800
 8000644:	40004400 	.word	0x40004400

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 f8a0 	bl	80007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <USART1_IRQHandler+0x10>)
 80006a2:	f002 f897 	bl	80027d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028

080006b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <USART2_IRQHandler+0x10>)
 80006b6:	f002 f88d 	bl	80027d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000b0 	.word	0x200000b0

080006c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006cc:	f000 fbd0 	bl	8000e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SystemInit+0x20>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <SystemInit+0x20>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000730 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006fc:	f7ff ffea 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	; (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <LoopForever+0xe>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	; (8000744 <LoopForever+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000726:	f003 fa19 	bl	8003b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800072a:	f7ff fd4d 	bl	80001c8 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000730:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800073c:	08003bfc 	.word	0x08003bfc
  ldr r2, =_sbss
 8000740:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000744:	20000148 	.word	0x20000148

08000748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_2_IRQHandler>
	...

0800074c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_Init+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_Init+0x28>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f92b 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000762:	200f      	movs	r0, #15
 8000764:	f000 f808 	bl	8000778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000768:	f7ff fec6 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x54>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x58>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000792:	fbb2 f3f3 	udiv	r3, r2, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f943 	bl	8000a22 <HAL_SYSTICK_Config>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00e      	b.n	80007c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d80a      	bhi.n	80007c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b4:	f000 f90b 	bl	80009ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b8:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <HAL_InitTick+0x5c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_IncTick+0x20>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x24>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_IncTick+0x24>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000144 	.word	0x20000144

08000800 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;  
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <HAL_GetTick+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000144 	.word	0x20000144

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60d3      	str	r3, [r2, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db0b      	blt.n	80008a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 021f 	and.w	r2, r3, #31
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <__NVIC_EnableIRQ+0x38>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	2001      	movs	r0, #1
 800089e:	fa00 f202 	lsl.w	r2, r0, r2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	; 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000984:	d301      	bcc.n	800098a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000986:	2301      	movs	r3, #1
 8000988:	e00f      	b.n	80009aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SysTick_Config+0x40>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000992:	210f      	movs	r1, #15
 8000994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000998:	f7ff ff8e 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SysTick_Config+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SysTick_Config+0x40>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff29 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e0:	f7ff ff3e 	bl	8000860 <__NVIC_GetPriorityGrouping>
 80009e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff ff8e 	bl	800090c <NVIC_EncodePriority>
 80009f0:	4602      	mov	r2, r0
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff5d 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff31 	bl	800087c <__NVIC_EnableIRQ>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ffa2 	bl	8000974 <SysTick_Config>
 8000a30:	4603      	mov	r3, r0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d008      	beq.n	8000a5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e020      	b.n	8000aa0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 020e 	bic.w	r2, r2, #14
 8000a6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0201 	bic.w	r2, r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a86:	2101      	movs	r1, #1
 8000a88:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2201      	movs	r2, #1
 8000a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d005      	beq.n	8000ace <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e027      	b.n	8000b1e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f022 020e 	bic.w	r2, r2, #14
 8000adc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 0201 	bic.w	r2, r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f202 	lsl.w	r2, r1, r2
 8000afc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2201      	movs	r2, #1
 8000b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	4798      	blx	r3
    } 
  }
  return status;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e14e      	b.n	8000dd6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 8140 	beq.w	8000dd0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d005      	beq.n	8000b68 <HAL_GPIO_Init+0x40>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d130      	bne.n	8000bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	f003 0201 	and.w	r2, r3, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d017      	beq.n	8000c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d123      	bne.n	8000c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	6939      	ldr	r1, [r7, #16]
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0203 	and.w	r2, r3, #3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 809a 	beq.w	8000dd0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9c:	4b55      	ldr	r3, [pc, #340]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a54      	ldr	r2, [pc, #336]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b52      	ldr	r3, [pc, #328]	; (8000df4 <HAL_GPIO_Init+0x2cc>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cb4:	4a50      	ldr	r2, [pc, #320]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	089b      	lsrs	r3, r3, #2
 8000cba:	3302      	adds	r3, #2
 8000cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	220f      	movs	r2, #15
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cde:	d013      	beq.n	8000d08 <HAL_GPIO_Init+0x1e0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a46      	ldr	r2, [pc, #280]	; (8000dfc <HAL_GPIO_Init+0x2d4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00d      	beq.n	8000d04 <HAL_GPIO_Init+0x1dc>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a45      	ldr	r2, [pc, #276]	; (8000e00 <HAL_GPIO_Init+0x2d8>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <HAL_GPIO_Init+0x1d8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <HAL_GPIO_Init+0x2dc>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_Init+0x1d4>
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e006      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	e004      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e002      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <HAL_GPIO_Init+0x1e2>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	f002 0203 	and.w	r2, r2, #3
 8000d10:	0092      	lsls	r2, r2, #2
 8000d12:	4093      	lsls	r3, r2
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d1a:	4937      	ldr	r1, [pc, #220]	; (8000df8 <HAL_GPIO_Init+0x2d0>)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	089b      	lsrs	r3, r3, #2
 8000d20:	3302      	adds	r3, #2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d28:	4b37      	ldr	r3, [pc, #220]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d4c:	4a2e      	ldr	r2, [pc, #184]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d76:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000da0:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <HAL_GPIO_Init+0x2e0>)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f47f aea9 	bne.w	8000b38 <HAL_GPIO_Init+0x10>
  }
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	48000800 	.word	0x48000800
 8000e04:	48000c00 	.word	0x48000c00
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4013      	ands	r3, r2
 8000e54:	041a      	lsls	r2, r3, #16
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43d9      	mvns	r1, r3
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	619a      	str	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e7c:	695a      	ldr	r2, [r3, #20]
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fb1a 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eb0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f001 b823 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 817d 	beq.w	80011d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000edc:	4bbc      	ldr	r3, [pc, #752]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	2b04      	cmp	r3, #4
 8000ee6:	d00c      	beq.n	8000f02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee8:	4bb9      	ldr	r3, [pc, #740]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d15c      	bne.n	8000fae <HAL_RCC_OscConfig+0x10e>
 8000ef4:	4bb6      	ldr	r3, [pc, #728]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f00:	d155      	bne.n	8000fae <HAL_RCC_OscConfig+0x10e>
 8000f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f06:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f0e:	fa93 f3a3 	rbit	r3, r3
 8000f12:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f16:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f1a:	fab3 f383 	clz	r3, r3
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	095b      	lsrs	r3, r3, #5
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d102      	bne.n	8000f34 <HAL_RCC_OscConfig+0x94>
 8000f2e:	4ba8      	ldr	r3, [pc, #672]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	e015      	b.n	8000f60 <HAL_RCC_OscConfig+0xc0>
 8000f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f38:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f50:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f5c:	4b9c      	ldr	r3, [pc, #624]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f64:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f68:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f6c:	fa92 f2a2 	rbit	r2, r2
 8000f70:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f74:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f78:	fab2 f282 	clz	r2, r2
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	f042 0220 	orr.w	r2, r2, #32
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	f002 021f 	and.w	r2, r2, #31
 8000f88:	2101      	movs	r1, #1
 8000f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 811f 	beq.w	80011d4 <HAL_RCC_OscConfig+0x334>
 8000f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 8116 	bne.w	80011d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f000 bfaf 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbe:	d106      	bne.n	8000fce <HAL_RCC_OscConfig+0x12e>
 8000fc0:	4b83      	ldr	r3, [pc, #524]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a82      	ldr	r2, [pc, #520]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e036      	b.n	800103c <HAL_RCC_OscConfig+0x19c>
 8000fce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x158>
 8000fde:	4b7c      	ldr	r3, [pc, #496]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a7b      	ldr	r2, [pc, #492]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b79      	ldr	r3, [pc, #484]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a78      	ldr	r2, [pc, #480]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8000ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e021      	b.n	800103c <HAL_RCC_OscConfig+0x19c>
 8000ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ffc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0x184>
 800100a:	4b71      	ldr	r3, [pc, #452]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a70      	ldr	r2, [pc, #448]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b6e      	ldr	r3, [pc, #440]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a6d      	ldr	r2, [pc, #436]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 800101c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e00b      	b.n	800103c <HAL_RCC_OscConfig+0x19c>
 8001024:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a69      	ldr	r2, [pc, #420]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 800102a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8001036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800103c:	4b64      	ldr	r3, [pc, #400]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	f023 020f 	bic.w	r2, r3, #15
 8001044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001048:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	495f      	ldr	r1, [pc, #380]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8001052:	4313      	orrs	r3, r2
 8001054:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800105a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d059      	beq.n	800111a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fbcb 	bl	8000800 <HAL_GetTick>
 800106a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	e00a      	b.n	8001086 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fbc6 	bl	8000800 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	; 0x64
 800107e:	d902      	bls.n	8001086 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	f000 bf43 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001086:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800108a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800109a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	095b      	lsrs	r3, r3, #5
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_RCC_OscConfig+0x218>
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	e015      	b.n	80010e4 <HAL_RCC_OscConfig+0x244>
 80010b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010e0:	4b3b      	ldr	r3, [pc, #236]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010f0:	fa92 f2a2 	rbit	r2, r2
 80010f4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010fc:	fab2 f282 	clz	r2, r2
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	f042 0220 	orr.w	r2, r2, #32
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	f002 021f 	and.w	r2, r2, #31
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	4013      	ands	r3, r2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0ab      	beq.n	8001070 <HAL_RCC_OscConfig+0x1d0>
 8001118:	e05d      	b.n	80011d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fb71 	bl	8000800 <HAL_GetTick>
 800111e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001122:	e00a      	b.n	800113a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fb6c 	bl	8000800 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b64      	cmp	r3, #100	; 0x64
 8001132:	d902      	bls.n	800113a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	f000 bee9 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>
 800113a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001142:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800114e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	095b      	lsrs	r3, r3, #5
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d102      	bne.n	800116c <HAL_RCC_OscConfig+0x2cc>
 8001166:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	e015      	b.n	8001198 <HAL_RCC_OscConfig+0x2f8>
 800116c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001170:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001184:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001188:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800118c:	fa93 f3a3 	rbit	r3, r3
 8001190:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_RCC_OscConfig+0x330>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800119c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011a4:	fa92 f2a2 	rbit	r2, r2
 80011a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011b0:	fab2 f282 	clz	r2, r2
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	f042 0220 	orr.w	r2, r2, #32
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	f002 021f 	and.w	r2, r2, #31
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ab      	bne.n	8001124 <HAL_RCC_OscConfig+0x284>
 80011cc:	e003      	b.n	80011d6 <HAL_RCC_OscConfig+0x336>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 817d 	beq.w	80014e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ec:	4ba6      	ldr	r3, [pc, #664]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00b      	beq.n	8001210 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011f8:	4ba3      	ldr	r3, [pc, #652]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d172      	bne.n	80012ea <HAL_RCC_OscConfig+0x44a>
 8001204:	4ba0      	ldr	r3, [pc, #640]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d16c      	bne.n	80012ea <HAL_RCC_OscConfig+0x44a>
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001222:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	095b      	lsrs	r3, r3, #5
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b01      	cmp	r3, #1
 8001238:	d102      	bne.n	8001240 <HAL_RCC_OscConfig+0x3a0>
 800123a:	4b93      	ldr	r3, [pc, #588]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	e013      	b.n	8001268 <HAL_RCC_OscConfig+0x3c8>
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001258:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001264:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	2202      	movs	r2, #2
 800126a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800126e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001272:	fa92 f2a2 	rbit	r2, r2
 8001276:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800127a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800127e:	fab2 f282 	clz	r2, r2
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	f042 0220 	orr.w	r2, r2, #32
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	f002 021f 	and.w	r2, r2, #31
 800128e:	2101      	movs	r1, #1
 8001290:	fa01 f202 	lsl.w	r2, r1, r2
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00a      	beq.n	80012b0 <HAL_RCC_OscConfig+0x410>
 800129a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d002      	beq.n	80012b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f000 be2e 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	4b75      	ldr	r3, [pc, #468]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	21f8      	movs	r1, #248	; 0xf8
 80012c6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012ce:	fa91 f1a1 	rbit	r1, r1
 80012d2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012da:	fab1 f181 	clz	r1, r1
 80012de:	b2c9      	uxtb	r1, r1
 80012e0:	408b      	lsls	r3, r1
 80012e2:	4969      	ldr	r1, [pc, #420]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e8:	e0fd      	b.n	80014e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8088 	beq.w	800140c <HAL_RCC_OscConfig+0x56c>
 80012fc:	2301      	movs	r3, #1
 80012fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800130e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800131c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	461a      	mov	r2, r3
 8001324:	2301      	movs	r3, #1
 8001326:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fa6a 	bl	8000800 <HAL_GetTick>
 800132c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	e00a      	b.n	8001348 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001332:	f7ff fa65 	bl	8000800 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d902      	bls.n	8001348 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	f000 bde2 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800135a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d102      	bne.n	8001378 <HAL_RCC_OscConfig+0x4d8>
 8001372:	4b45      	ldr	r3, [pc, #276]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	e013      	b.n	80013a0 <HAL_RCC_OscConfig+0x500>
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001390:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	2202      	movs	r2, #2
 80013a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013aa:	fa92 f2a2 	rbit	r2, r2
 80013ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013b6:	fab2 f282 	clz	r2, r2
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	f042 0220 	orr.w	r2, r2, #32
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	f002 021f 	and.w	r2, r2, #31
 80013c6:	2101      	movs	r1, #1
 80013c8:	fa01 f202 	lsl.w	r2, r1, r2
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0af      	beq.n	8001332 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	21f8      	movs	r1, #248	; 0xf8
 80013e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013f0:	fa91 f1a1 	rbit	r1, r1
 80013f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013fc:	fab1 f181 	clz	r1, r1
 8001400:	b2c9      	uxtb	r1, r1
 8001402:	408b      	lsls	r3, r1
 8001404:	4920      	ldr	r1, [pc, #128]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
 800140a:	e06c      	b.n	80014e6 <HAL_RCC_OscConfig+0x646>
 800140c:	2301      	movs	r3, #1
 800140e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001412:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001416:	fa93 f3a3 	rbit	r3, r3
 800141a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800141e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001422:	fab3 f383 	clz	r3, r3
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800142c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	461a      	mov	r2, r3
 8001434:	2300      	movs	r3, #0
 8001436:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff f9e2 	bl	8000800 <HAL_GetTick>
 800143c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001440:	e00a      	b.n	8001458 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff f9dd 	bl	8000800 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d902      	bls.n	8001458 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	f000 bd5a 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800146a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	095b      	lsrs	r3, r3, #5
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b01      	cmp	r3, #1
 8001480:	d104      	bne.n	800148c <HAL_RCC_OscConfig+0x5ec>
 8001482:	4b01      	ldr	r3, [pc, #4]	; (8001488 <HAL_RCC_OscConfig+0x5e8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	e015      	b.n	80014b4 <HAL_RCC_OscConfig+0x614>
 8001488:	40021000 	.word	0x40021000
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014b0:	4bc8      	ldr	r3, [pc, #800]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	2202      	movs	r2, #2
 80014b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014be:	fa92 f2a2 	rbit	r2, r2
 80014c2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014ca:	fab2 f282 	clz	r2, r2
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	f042 0220 	orr.w	r2, r2, #32
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	f002 021f 	and.w	r2, r2, #31
 80014da:	2101      	movs	r1, #1
 80014dc:	fa01 f202 	lsl.w	r2, r1, r2
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1ad      	bne.n	8001442 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8110 	beq.w	800171c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d079      	beq.n	8001600 <HAL_RCC_OscConfig+0x760>
 800150c:	2301      	movs	r3, #1
 800150e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800151e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4bab      	ldr	r3, [pc, #684]	; (80017d8 <HAL_RCC_OscConfig+0x938>)
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	461a      	mov	r2, r3
 8001532:	2301      	movs	r3, #1
 8001534:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff f963 	bl	8000800 <HAL_GetTick>
 800153a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff f95e 	bl	8000800 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d902      	bls.n	8001556 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	f000 bcdb 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001560:	fa93 f3a3 	rbit	r3, r3
 8001564:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001570:	2202      	movs	r2, #2
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fa93 f2a3 	rbit	r2, r3
 8001582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001594:	2202      	movs	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f2a3 	rbit	r2, r3
 80015a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b0:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 80015b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015bc:	2102      	movs	r1, #2
 80015be:	6019      	str	r1, [r3, #0]
 80015c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fa93 f1a3 	rbit	r1, r3
 80015ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015d6:	6019      	str	r1, [r3, #0]
  return result;
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fab3 f383 	clz	r3, r3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0a0      	beq.n	8001540 <HAL_RCC_OscConfig+0x6a0>
 80015fe:	e08d      	b.n	800171c <HAL_RCC_OscConfig+0x87c>
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001610:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001622:	601a      	str	r2, [r3, #0]
  return result;
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800162c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x938>)
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	461a      	mov	r2, r3
 800163e:	2300      	movs	r3, #0
 8001640:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff f8dd 	bl	8000800 <HAL_GetTick>
 8001646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff f8d8 	bl	8000800 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d902      	bls.n	8001662 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	f000 bc55 	b.w	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800166a:	2202      	movs	r2, #2
 800166c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fa93 f2a3 	rbit	r2, r3
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016b2:	2202      	movs	r2, #2
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ce:	4b41      	ldr	r3, [pc, #260]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016da:	2102      	movs	r1, #2
 80016dc:	6019      	str	r1, [r3, #0]
 80016de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fa93 f1a3 	rbit	r1, r3
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016f4:	6019      	str	r1, [r3, #0]
  return result;
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fab3 f383 	clz	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d197      	bne.n	800164c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 81a1 	beq.w	8001a74 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001738:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d116      	bne.n	8001772 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174e:	61d3      	str	r3, [r2, #28]
 8001750:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001766:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800176a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800176c:	2301      	movs	r3, #1
 800176e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_RCC_OscConfig+0x93c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d11a      	bne.n	80017b4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <HAL_RCC_OscConfig+0x93c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_RCC_OscConfig+0x93c>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178a:	f7ff f839 	bl	8000800 <HAL_GetTick>
 800178e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	e009      	b.n	80017a8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001794:	f7ff f834 	bl	8000800 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b64      	cmp	r3, #100	; 0x64
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e3b1      	b.n	8001f0c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_RCC_OscConfig+0x93c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ef      	beq.n	8001794 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10d      	bne.n	80017e0 <HAL_RCC_OscConfig+0x940>
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a02      	ldr	r2, [pc, #8]	; (80017d4 <HAL_RCC_OscConfig+0x934>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	e03c      	b.n	800184c <HAL_RCC_OscConfig+0x9ac>
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	10908120 	.word	0x10908120
 80017dc:	40007000 	.word	0x40007000
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10c      	bne.n	800180a <HAL_RCC_OscConfig+0x96a>
 80017f0:	4bc1      	ldr	r3, [pc, #772]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4ac0      	ldr	r2, [pc, #768]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	4bbe      	ldr	r3, [pc, #760]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4abd      	ldr	r2, [pc, #756]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	e020      	b.n	800184c <HAL_RCC_OscConfig+0x9ac>
 800180a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x994>
 800181a:	4bb7      	ldr	r3, [pc, #732]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4ab6      	ldr	r2, [pc, #728]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	4bb4      	ldr	r3, [pc, #720]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4ab3      	ldr	r2, [pc, #716]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	e00b      	b.n	800184c <HAL_RCC_OscConfig+0x9ac>
 8001834:	4bb0      	ldr	r3, [pc, #704]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4aaf      	ldr	r2, [pc, #700]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6213      	str	r3, [r2, #32]
 8001840:	4bad      	ldr	r3, [pc, #692]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4aac      	ldr	r2, [pc, #688]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001846:	f023 0304 	bic.w	r3, r3, #4
 800184a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8081 	beq.w	8001960 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7fe ffcf 	bl	8000800 <HAL_GetTick>
 8001862:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7fe ffca 	bl	8000800 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	f241 3288 	movw	r2, #5000	; 0x1388
 8001878:	4293      	cmp	r3, r2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e345      	b.n	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001888:	2202      	movs	r2, #2
 800188a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	fa93 f2a3 	rbit	r2, r3
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018ac:	2202      	movs	r2, #2
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	fa93 f2a3 	rbit	r2, r3
 80018be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018c6:	601a      	str	r2, [r3, #0]
  return result;
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d102      	bne.n	80018ec <HAL_RCC_OscConfig+0xa4c>
 80018e6:	4b84      	ldr	r3, [pc, #528]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	e013      	b.n	8001914 <HAL_RCC_OscConfig+0xa74>
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018f4:	2202      	movs	r2, #2
 80018f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f2a3 	rbit	r2, r3
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001918:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800191c:	2102      	movs	r1, #2
 800191e:	6011      	str	r1, [r2, #0]
 8001920:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001924:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	fa92 f1a2 	rbit	r1, r2
 800192e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001932:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001936:	6011      	str	r1, [r2, #0]
  return result;
 8001938:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800193c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f002 021f 	and.w	r2, r2, #31
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d084      	beq.n	8001868 <HAL_RCC_OscConfig+0x9c8>
 800195e:	e07f      	b.n	8001a60 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7fe ff4e 	bl	8000800 <HAL_GetTick>
 8001964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001968:	e00b      	b.n	8001982 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7fe ff49 	bl	8000800 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e2c4      	b.n	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800198a:	2202      	movs	r2, #2
 800198c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ae:	2202      	movs	r2, #2
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019c8:	601a      	str	r2, [r3, #0]
  return result;
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d102      	bne.n	80019ee <HAL_RCC_OscConfig+0xb4e>
 80019e8:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	e013      	b.n	8001a16 <HAL_RCC_OscConfig+0xb76>
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019f6:	2202      	movs	r2, #2
 80019f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a1e:	2102      	movs	r1, #2
 8001a20:	6011      	str	r1, [r2, #0]
 8001a22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a26:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	fa92 f1a2 	rbit	r1, r2
 8001a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a38:	6011      	str	r1, [r2, #0]
  return result;
 8001a3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	fab2 f282 	clz	r2, r2
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f002 021f 	and.w	r2, r2, #31
 8001a54:	2101      	movs	r1, #1
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d184      	bne.n	800196a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8242 	beq.w	8001f0a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_RCC_OscConfig+0xc58>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	f000 8213 	beq.w	8001eba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	f040 8162 	bne.w	8001d6a <HAL_RCC_OscConfig+0xeca>
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001aae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ab2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	fa93 f2a3 	rbit	r2, r3
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aca:	601a      	str	r2, [r3, #0]
  return result;
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ad4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7fe fe88 	bl	8000800 <HAL_GetTick>
 8001af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e00c      	b.n	8001b10 <HAL_RCC_OscConfig+0xc70>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afc:	f7fe fe80 	bl	8000800 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1fd      	b.n	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b14:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b22:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b34:	601a      	str	r2, [r3, #0]
  return result;
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_OscConfig+0xcba>
 8001b54:	4bb0      	ldr	r3, [pc, #704]	; (8001e18 <HAL_RCC_OscConfig+0xf78>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	e027      	b.n	8001baa <HAL_RCC_OscConfig+0xd0a>
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	fa93 f2a3 	rbit	r2, r3
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	4b9c      	ldr	r3, [pc, #624]	; (8001e18 <HAL_RCC_OscConfig+0xf78>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bb2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bb6:	6011      	str	r1, [r2, #0]
 8001bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bbc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	fa92 f1a2 	rbit	r1, r2
 8001bc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bce:	6011      	str	r1, [r2, #0]
  return result;
 8001bd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	fab2 f282 	clz	r2, r2
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f042 0220 	orr.w	r2, r2, #32
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f002 021f 	and.w	r2, r2, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d182      	bne.n	8001afc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf6:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <HAL_RCC_OscConfig+0xf78>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	430b      	orrs	r3, r1
 8001c18:	497f      	ldr	r1, [pc, #508]	; (8001e18 <HAL_RCC_OscConfig+0xf78>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c42:	601a      	str	r2, [r3, #0]
  return result;
 8001c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c48:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c4c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2301      	movs	r3, #1
 8001c62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7fe fdcc 	bl	8000800 <HAL_GetTick>
 8001c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7fe fdc7 	bl	8000800 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e144      	b.n	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c94:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f2a3 	rbit	r2, r3
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ca6:	601a      	str	r2, [r3, #0]
  return result;
 8001ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d102      	bne.n	8001ccc <HAL_RCC_OscConfig+0xe2c>
 8001cc6:	4b54      	ldr	r3, [pc, #336]	; (8001e18 <HAL_RCC_OscConfig+0xf78>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	e027      	b.n	8001d1c <HAL_RCC_OscConfig+0xe7c>
 8001ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_RCC_OscConfig+0xf78>)
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d20:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d40:	6011      	str	r1, [r2, #0]
  return result;
 8001d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f042 0220 	orr.w	r2, r2, #32
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f002 021f 	and.w	r2, r2, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d082      	beq.n	8001c6e <HAL_RCC_OscConfig+0xdce>
 8001d68:	e0cf      	b.n	8001f0a <HAL_RCC_OscConfig+0x106a>
 8001d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fa93 f2a3 	rbit	r2, r3
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d8e:	601a      	str	r2, [r3, #0]
  return result;
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	461a      	mov	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fd26 	bl	8000800 <HAL_GetTick>
 8001db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	e009      	b.n	8001dce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe fd21 	bl	8000800 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e09e      	b.n	8001f0c <HAL_RCC_OscConfig+0x106c>
 8001dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	fa93 f2a3 	rbit	r2, r3
 8001dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001df2:	601a      	str	r2, [r3, #0]
  return result;
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d104      	bne.n	8001e1c <HAL_RCC_OscConfig+0xf7c>
 8001e12:	4b01      	ldr	r3, [pc, #4]	; (8001e18 <HAL_RCC_OscConfig+0xf78>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	e029      	b.n	8001e6c <HAL_RCC_OscConfig+0xfcc>
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e20:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e46:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e62:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_RCC_OscConfig+0x1078>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e70:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e78:	6011      	str	r1, [r2, #0]
 8001e7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e7e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	fa92 f1a2 	rbit	r1, r2
 8001e88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e8c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e90:	6011      	str	r1, [r2, #0]
  return result;
 8001e92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fab2 f282 	clz	r2, r2
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	f002 021f 	and.w	r2, r2, #31
 8001eac:	2101      	movs	r1, #1
 8001eae:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d180      	bne.n	8001dba <HAL_RCC_OscConfig+0xf1a>
 8001eb8:	e027      	b.n	8001f0a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e01e      	b.n	8001f0c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_OscConfig+0x1078>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ed6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d10b      	bne.n	8001f06 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001eee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ef2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b09e      	sub	sp, #120	; 0x78
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e162      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b90      	ldr	r3, [pc, #576]	; (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b8d      	ldr	r3, [pc, #564]	; (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	498b      	ldr	r1, [pc, #556]	; (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b89      	ldr	r3, [pc, #548]	; (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e14a      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	497f      	ldr	r1, [pc, #508]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80dc 	beq.w	8002148 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d13c      	bne.n	8002012 <HAL_RCC_ClockConfig+0xf6>
 8001f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f9c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xa6>
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	e00f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0xc6>
 8001fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	667b      	str	r3, [r7, #100]	; 0x64
 8001fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fe8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fea:	fa92 f2a2 	rbit	r2, r2
 8001fee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ff2:	fab2 f282 	clz	r2, r2
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f042 0220 	orr.w	r2, r2, #32
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f002 021f 	and.w	r2, r2, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d17b      	bne.n	8002106 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0f3      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d13c      	bne.n	8002094 <HAL_RCC_ClockConfig+0x178>
 800201a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_RCC_ClockConfig+0x128>
 800203e:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e00f      	b.n	8002064 <HAL_RCC_ClockConfig+0x148>
 8002044:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002048:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	647b      	str	r3, [r7, #68]	; 0x44
 8002052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002056:	643b      	str	r3, [r7, #64]	; 0x40
 8002058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002060:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002068:	63ba      	str	r2, [r7, #56]	; 0x38
 800206a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800206c:	fa92 f2a2 	rbit	r2, r2
 8002070:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002074:	fab2 f282 	clz	r2, r2
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f042 0220 	orr.w	r2, r2, #32
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	f002 021f 	and.w	r2, r2, #31
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f202 	lsl.w	r2, r1, r2
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d13a      	bne.n	8002106 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b2      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
 8002094:	2302      	movs	r3, #2
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_ClockConfig+0x1a0>
 80020b6:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e00d      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1bc>
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2202      	movs	r2, #2
 80020da:	61ba      	str	r2, [r7, #24]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	617a      	str	r2, [r7, #20]
  return result;
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f042 0220 	orr.w	r2, r2, #32
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e079      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	491a      	ldr	r1, [pc, #104]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7fe fb72 	bl	8000800 <HAL_GetTick>
 800211c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fb6e 	bl	8000800 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e061      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_RCC_ClockConfig+0x260>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x25c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d214      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	4906      	ldr	r1, [pc, #24]	; (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e040      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	491a      	ldr	r1, [pc, #104]	; (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4912      	ldr	r1, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021be:	f000 f829 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021c2:	4601      	mov	r1, r0
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021cc:	22f0      	movs	r2, #240	; 0xf0
 80021ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	fa92 f2a2 	rbit	r2, r2
 80021d6:	60fa      	str	r2, [r7, #12]
  return result;
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	fab2 f282 	clz	r2, r2
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	40d3      	lsrs	r3, r2
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x2ec>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	fa21 f303 	lsr.w	r3, r1, r3
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <HAL_RCC_ClockConfig+0x2f0>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_RCC_ClockConfig+0x2f4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fac0 	bl	8000778 <HAL_InitTick>
  
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3778      	adds	r7, #120	; 0x78
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	08003bbc 	.word	0x08003bbc
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b08b      	sub	sp, #44	; 0x2c
 8002218:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x30>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x36>
 8002242:	e03c      	b.n	80022be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002246:	623b      	str	r3, [r7, #32]
      break;
 8002248:	e03c      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002250:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002254:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	607a      	str	r2, [r7, #4]
  return result;
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	fab2 f282 	clz	r2, r2
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	40d3      	lsrs	r3, r2
 8002268:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <HAL_RCC_GetSysClockFreq+0xc8>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	220f      	movs	r2, #15
 8002278:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	fa92 f2a2 	rbit	r2, r2
 8002280:	60fa      	str	r2, [r7, #12]
  return result;
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	fab2 f282 	clz	r2, r2
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	40d3      	lsrs	r3, r2
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	e004      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	623b      	str	r3, [r7, #32]
      break;
 80022bc:	e002      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022c0:	623b      	str	r3, [r7, #32]
      break;
 80022c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c4:	6a3b      	ldr	r3, [r7, #32]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	372c      	adds	r7, #44	; 0x2c
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	007a1200 	.word	0x007a1200
 80022dc:	08003bd4 	.word	0x08003bd4
 80022e0:	08003be4 	.word	0x08003be4
 80022e4:	003d0900 	.word	0x003d0900

080022e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_RCC_GetHCLKFreq+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000

08002300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002306:	f7ff ffef 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 800230a:	4601      	mov	r1, r0
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002314:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002318:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	fa92 f2a2 	rbit	r2, r2
 8002320:	603a      	str	r2, [r7, #0]
  return result;
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	40d3      	lsrs	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x40>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	08003bcc 	.word	0x08003bcc

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800234a:	f7ff ffcd 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002358:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800235c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	fa92 f2a2 	rbit	r2, r2
 8002364:	603a      	str	r2, [r7, #0]
  return result;
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	fab2 f282 	clz	r2, r2
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	40d3      	lsrs	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	08003bcc 	.word	0x08003bcc

08002388 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b092      	sub	sp, #72	; 0x48
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80cd 	beq.w	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ac:	4b8e      	ldr	r3, [pc, #568]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10e      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b8:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	4a8a      	ldr	r2, [pc, #552]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	61d3      	str	r3, [r2, #28]
 80023c4:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d6:	4b85      	ldr	r3, [pc, #532]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a81      	ldr	r2, [pc, #516]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fa07 	bl	8000800 <HAL_GetTick>
 80023f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fa03 	bl	8000800 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	; 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e0ea      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	4b78      	ldr	r3, [pc, #480]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002414:	4b74      	ldr	r3, [pc, #464]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d07d      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800242e:	429a      	cmp	r2, r3
 8002430:	d076      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002432:	4b6d      	ldr	r3, [pc, #436]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800244c:	fab3 f383 	clz	r3, r3
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	461a      	mov	r2, r3
 800245c:	2301      	movs	r3, #1
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800246e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	461a      	mov	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002488:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800248a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d045      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe f9b4 	bl	8000800 <HAL_GetTick>
 8002498:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	e00a      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe f9b0 	bl	8000800 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e095      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x256>
 80024b2:	2302      	movs	r3, #2
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	2302      	movs	r3, #2
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	61fb      	str	r3, [r7, #28]
  return result;
 80024ca:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	fab3 f383 	clz	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d102      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024e0:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	e007      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	2202      	movs	r2, #2
 80024f8:	613a      	str	r2, [r7, #16]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	fa92 f2a2 	rbit	r2, r2
 8002500:	60fa      	str	r2, [r7, #12]
  return result;
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f002 021f 	and.w	r2, r2, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0bd      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	492e      	ldr	r1, [pc, #184]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252e:	4313      	orrs	r3, r2
 8002530:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002532:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a2a      	ldr	r2, [pc, #168]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002544:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f023 0203 	bic.w	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4922      	ldr	r1, [pc, #136]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002560:	4313      	orrs	r3, r2
 8002562:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	f023 0210 	bic.w	r2, r3, #16
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	491a      	ldr	r1, [pc, #104]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257e:	4313      	orrs	r3, r2
 8002580:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4913      	ldr	r1, [pc, #76]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	4313      	orrs	r3, r2
 800259e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	490b      	ldr	r1, [pc, #44]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	4904      	ldr	r1, [pc, #16]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3748      	adds	r7, #72	; 0x48
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
 80025f0:	10908100 	.word	0x10908100

080025f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e040      	b.n	8002688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fd ff92 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	; 0x24
 8002620:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fbca 	bl	8002dcc <UART_SetConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e022      	b.n	8002688 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fcf4 	bl	8003038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800265e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800266e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fd7b 	bl	800317c <UART_CheckIdleState>
 8002686:	4603      	mov	r3, r0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	; 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d147      	bne.n	8002736 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <HAL_UART_Transmit_IT+0x22>
 80026ac:	88fb      	ldrh	r3, [r7, #6]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e040      	b.n	8002738 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2221      	movs	r2, #33	; 0x21
 80026de:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e8:	d107      	bne.n	80026fa <HAL_UART_Transmit_IT+0x6a>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4a13      	ldr	r2, [pc, #76]	; (8002744 <HAL_UART_Transmit_IT+0xb4>)
 80026f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80026f8:	e002      	b.n	8002700 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_UART_Transmit_IT+0xb8>)
 80026fe:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	613b      	str	r3, [r7, #16]
   return(result);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	69f9      	ldr	r1, [r7, #28]
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	61bb      	str	r3, [r7, #24]
   return(result);
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e6      	bne.n	8002700 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002736:	2302      	movs	r3, #2
  }
}
 8002738:	4618      	mov	r0, r3
 800273a:	372c      	adds	r7, #44	; 0x2c
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	080036d5 	.word	0x080036d5
 8002748:	0800361d 	.word	0x0800361d

0800274c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002760:	2b20      	cmp	r3, #32
 8002762:	d132      	bne.n	80027ca <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_UART_Receive_IT+0x24>
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e02b      	b.n	80027cc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d018      	beq.n	80027ba <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	e853 3f00 	ldrex	r3, [r3]
 8002794:	613b      	str	r3, [r7, #16]
   return(result);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	623b      	str	r3, [r7, #32]
 80027a8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027aa:	69f9      	ldr	r1, [r7, #28]
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	e841 2300 	strex	r3, r2, [r1]
 80027b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1e6      	bne.n	8002788 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	461a      	mov	r2, r3
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fdeb 	bl	800339c <UART_Start_Receive_IT>
 80027c6:	4603      	mov	r3, r0
 80027c8:	e000      	b.n	80027cc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
  }
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0ba      	sub	sp, #232	; 0xe8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002802:	4013      	ands	r3, r2
 8002804:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d115      	bne.n	800283c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00f      	beq.n	800283c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800281c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 82ab 	beq.w	8002d88 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
      }
      return;
 800283a:	e2a5      	b.n	8002d88 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800283c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8117 	beq.w	8002a74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d106      	bne.n	8002860 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002852:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002856:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <HAL_UART_IRQHandler+0x298>)
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 810a 	beq.w	8002a74 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d011      	beq.n	8002890 <HAL_UART_IRQHandler+0xbc>
 800286c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d011      	beq.n	80028c0 <HAL_UART_IRQHandler+0xec>
 800289c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2202      	movs	r2, #2
 80028ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028b6:	f043 0204 	orr.w	r2, r3, #4
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d011      	beq.n	80028f0 <HAL_UART_IRQHandler+0x11c>
 80028cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2204      	movs	r2, #4
 80028de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e6:	f043 0202 	orr.w	r2, r3, #2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d017      	beq.n	800292c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800290c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2208      	movs	r2, #8
 800291a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002922:	f043 0208 	orr.w	r2, r3, #8
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800292c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002934:	2b00      	cmp	r3, #0
 8002936:	d012      	beq.n	800295e <HAL_UART_IRQHandler+0x18a>
 8002938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800293c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00c      	beq.n	800295e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800294c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8211 	beq.w	8002d8c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800296a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002998:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d005      	beq.n	80029b6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d04f      	beq.n	8002a56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fdb6 	bl	8003528 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b40      	cmp	r3, #64	; 0x40
 80029c8:	d141      	bne.n	8002a4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3308      	adds	r3, #8
 80029d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029d8:	e853 3f00 	ldrex	r3, [r3]
 80029dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3308      	adds	r3, #8
 80029f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a06:	e841 2300 	strex	r3, r2, [r1]
 8002a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1d9      	bne.n	80029ca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d013      	beq.n	8002a46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <HAL_UART_IRQHandler+0x29c>)
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe f83e 	bl	8000aac <HAL_DMA_Abort_IT>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d017      	beq.n	8002a66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a40:	4610      	mov	r0, r2
 8002a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	e00f      	b.n	8002a66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f9aa 	bl	8002da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a4c:	e00b      	b.n	8002a66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f9a6 	bl	8002da0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a54:	e007      	b.n	8002a66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f9a2 	bl	8002da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002a64:	e192      	b.n	8002d8c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a66:	bf00      	nop
    return;
 8002a68:	e190      	b.n	8002d8c <HAL_UART_IRQHandler+0x5b8>
 8002a6a:	bf00      	nop
 8002a6c:	04000120 	.word	0x04000120
 8002a70:	080035f1 	.word	0x080035f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	f040 814b 	bne.w	8002d14 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8144 	beq.w	8002d14 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 813d 	beq.w	8002d14 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2210      	movs	r2, #16
 8002aa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	f040 80b5 	bne.w	8002c1c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002abe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8164 	beq.w	8002d90 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	f080 815c 	bcs.w	8002d90 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ade:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	f000 8086 	beq.w	8002bfa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b1c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1da      	bne.n	8002aee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b42:	e853 3f00 	ldrex	r3, [r3]
 8002b46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3308      	adds	r3, #8
 8002b58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e1      	bne.n	8002b38 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	3308      	adds	r3, #8
 8002b94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ba0:	e841 2300 	strex	r3, r2, [r1]
 8002ba4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e3      	bne.n	8002b74 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc2:	e853 3f00 	ldrex	r3, [r3]
 8002bc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bca:	f023 0310 	bic.w	r3, r3, #16
 8002bce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bde:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002be2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e4      	bne.n	8002bba <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd ff20 	bl	8000a3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f8cd 	bl	8002db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c1a:	e0b9      	b.n	8002d90 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80ab 	beq.w	8002d94 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002c3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80a6 	beq.w	8002d94 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e4      	bne.n	8002c48 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3308      	adds	r3, #8
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e3      	bne.n	8002c7e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0310 	bic.w	r3, r3, #16
 8002cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	69b9      	ldr	r1, [r7, #24]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e4      	bne.n	8002cca <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f851 	bl	8002db4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d12:	e03f      	b.n	8002d94 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_UART_IRQHandler+0x56a>
 8002d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fefe 	bl	8003b38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d3c:	e02d      	b.n	8002d9a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00e      	beq.n	8002d68 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01c      	beq.n	8002d98 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
    }
    return;
 8002d66:	e017      	b.n	8002d98 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d012      	beq.n	8002d9a <HAL_UART_IRQHandler+0x5c6>
 8002d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00c      	beq.n	8002d9a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fd07 	bl	8003794 <UART_EndTransmit_IT>
    return;
 8002d86:	e008      	b.n	8002d9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d88:	bf00      	nop
 8002d8a:	e006      	b.n	8002d9a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002d8c:	bf00      	nop
 8002d8e:	e004      	b.n	8002d9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d90:	bf00      	nop
 8002d92:	e002      	b.n	8002d9a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002d98:	bf00      	nop
  }

}
 8002d9a:	37e8      	adds	r7, #232	; 0xe8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b8a      	ldr	r3, [pc, #552]	; (8003020 <UART_SetConfig+0x254>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	6979      	ldr	r1, [r7, #20]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a78      	ldr	r2, [pc, #480]	; (8003024 <UART_SetConfig+0x258>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d120      	bne.n	8002e8a <UART_SetConfig+0xbe>
 8002e48:	4b77      	ldr	r3, [pc, #476]	; (8003028 <UART_SetConfig+0x25c>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d817      	bhi.n	8002e84 <UART_SetConfig+0xb8>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <UART_SetConfig+0x90>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e79 	.word	0x08002e79
 8002e64:	08002e7f 	.word	0x08002e7f
 8002e68:	08002e73 	.word	0x08002e73
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e01d      	b.n	8002eae <UART_SetConfig+0xe2>
 8002e72:	2302      	movs	r3, #2
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e01a      	b.n	8002eae <UART_SetConfig+0xe2>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e017      	b.n	8002eae <UART_SetConfig+0xe2>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e014      	b.n	8002eae <UART_SetConfig+0xe2>
 8002e84:	2310      	movs	r3, #16
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e011      	b.n	8002eae <UART_SetConfig+0xe2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a67      	ldr	r2, [pc, #412]	; (800302c <UART_SetConfig+0x260>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d102      	bne.n	8002e9a <UART_SetConfig+0xce>
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e009      	b.n	8002eae <UART_SetConfig+0xe2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a64      	ldr	r2, [pc, #400]	; (8003030 <UART_SetConfig+0x264>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d102      	bne.n	8002eaa <UART_SetConfig+0xde>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e001      	b.n	8002eae <UART_SetConfig+0xe2>
 8002eaa:	2310      	movs	r3, #16
 8002eac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d15a      	bne.n	8002f6e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002eb8:	7ffb      	ldrb	r3, [r7, #31]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d827      	bhi.n	8002f0e <UART_SetConfig+0x142>
 8002ebe:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <UART_SetConfig+0xf8>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	08002ef1 	.word	0x08002ef1
 8002ecc:	08002ef9 	.word	0x08002ef9
 8002ed0:	08002f0f 	.word	0x08002f0f
 8002ed4:	08002eff 	.word	0x08002eff
 8002ed8:	08002f0f 	.word	0x08002f0f
 8002edc:	08002f0f 	.word	0x08002f0f
 8002ee0:	08002f0f 	.word	0x08002f0f
 8002ee4:	08002f07 	.word	0x08002f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f7ff fa0a 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 8002eec:	61b8      	str	r0, [r7, #24]
        break;
 8002eee:	e013      	b.n	8002f18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef0:	f7ff fa28 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8002ef4:	61b8      	str	r0, [r7, #24]
        break;
 8002ef6:	e00f      	b.n	8002f18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	; (8003034 <UART_SetConfig+0x268>)
 8002efa:	61bb      	str	r3, [r7, #24]
        break;
 8002efc:	e00c      	b.n	8002f18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002efe:	f7ff f989 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002f02:	61b8      	str	r0, [r7, #24]
        break;
 8002f04:	e008      	b.n	8002f18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0a:	61bb      	str	r3, [r7, #24]
        break;
 8002f0c:	e004      	b.n	8002f18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	77bb      	strb	r3, [r7, #30]
        break;
 8002f16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d074      	beq.n	8003008 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	005a      	lsls	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	441a      	add	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	d916      	bls.n	8002f68 <UART_SetConfig+0x19c>
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d212      	bcs.n	8002f68 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	f023 030f 	bic.w	r3, r3, #15
 8002f4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	89fa      	ldrh	r2, [r7, #14]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	e04f      	b.n	8003008 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	77bb      	strb	r3, [r7, #30]
 8002f6c:	e04c      	b.n	8003008 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d828      	bhi.n	8002fc6 <UART_SetConfig+0x1fa>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <UART_SetConfig+0x1b0>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08002fa9 	.word	0x08002fa9
 8002f84:	08002fb1 	.word	0x08002fb1
 8002f88:	08002fc7 	.word	0x08002fc7
 8002f8c:	08002fb7 	.word	0x08002fb7
 8002f90:	08002fc7 	.word	0x08002fc7
 8002f94:	08002fc7 	.word	0x08002fc7
 8002f98:	08002fc7 	.word	0x08002fc7
 8002f9c:	08002fbf 	.word	0x08002fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7ff f9ae 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	61b8      	str	r0, [r7, #24]
        break;
 8002fa6:	e013      	b.n	8002fd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7ff f9cc 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 8002fac:	61b8      	str	r0, [r7, #24]
        break;
 8002fae:	e00f      	b.n	8002fd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fb0:	4b20      	ldr	r3, [pc, #128]	; (8003034 <UART_SetConfig+0x268>)
 8002fb2:	61bb      	str	r3, [r7, #24]
        break;
 8002fb4:	e00c      	b.n	8002fd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb6:	f7ff f92d 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002fba:	61b8      	str	r0, [r7, #24]
        break;
 8002fbc:	e008      	b.n	8002fd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fc2:	61bb      	str	r3, [r7, #24]
        break;
 8002fc4:	e004      	b.n	8002fd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	77bb      	strb	r3, [r7, #30]
        break;
 8002fce:	bf00      	nop
    }

    if (pclk != 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d018      	beq.n	8003008 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	085a      	lsrs	r2, r3, #1
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	441a      	add	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d909      	bls.n	8003004 <UART_SetConfig+0x238>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff6:	d205      	bcs.n	8003004 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	e001      	b.n	8003008 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003014:	7fbb      	ldrb	r3, [r7, #30]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	efff69f3 	.word	0xefff69f3
 8003024:	40013800 	.word	0x40013800
 8003028:	40021000 	.word	0x40021000
 800302c:	40004400 	.word	0x40004400
 8003030:	40004800 	.word	0x40004800
 8003034:	007a1200 	.word	0x007a1200

08003038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	f003 0320 	and.w	r3, r3, #32
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01a      	beq.n	800314e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003136:	d10a      	bne.n	800314e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b098      	sub	sp, #96	; 0x60
 8003180:	af02      	add	r7, sp, #8
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800318c:	f7fd fb38 	bl	8000800 <HAL_GetTick>
 8003190:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b08      	cmp	r3, #8
 800319e:	d12e      	bne.n	80031fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a8:	2200      	movs	r2, #0
 80031aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f88c 	bl	80032cc <UART_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d021      	beq.n	80031fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ce:	653b      	str	r3, [r7, #80]	; 0x50
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d8:	647b      	str	r3, [r7, #68]	; 0x44
 80031da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e6      	bne.n	80031ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e062      	b.n	80032c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b04      	cmp	r3, #4
 800320a:	d149      	bne.n	80032a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800320c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003214:	2200      	movs	r2, #0
 8003216:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f856 	bl	80032cc <UART_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d03c      	beq.n	80032a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	e853 3f00 	ldrex	r3, [r3]
 8003232:	623b      	str	r3, [r7, #32]
   return(result);
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
 8003246:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800324a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e6      	bne.n	8003226 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3308      	adds	r3, #8
 800325e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60fb      	str	r3, [r7, #12]
   return(result);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3308      	adds	r3, #8
 8003276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003278:	61fa      	str	r2, [r7, #28]
 800327a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	69b9      	ldr	r1, [r7, #24]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	617b      	str	r3, [r7, #20]
   return(result);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e5      	bne.n	8003258 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e011      	b.n	80032c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3758      	adds	r7, #88	; 0x58
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032dc:	e049      	b.n	8003372 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e4:	d045      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fd fa8b 	bl	8000800 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <UART_WaitOnFlagUntilTimeout+0x30>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e048      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d031      	beq.n	8003372 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d110      	bne.n	800333e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2208      	movs	r2, #8
 8003322:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f8ff 	bl	8003528 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2208      	movs	r2, #8
 800332e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e029      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334c:	d111      	bne.n	8003372 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f8e5 	bl	8003528 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e00f      	b.n	8003392 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	69da      	ldr	r2, [r3, #28]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	79fb      	ldrb	r3, [r7, #7]
 800338c:	429a      	cmp	r2, r3
 800338e:	d0a6      	beq.n	80032de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800339c:	b480      	push	{r7}
 800339e:	b097      	sub	sp, #92	; 0x5c
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	d10e      	bne.n	80033ee <UART_Start_Receive_IT+0x52>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <UART_Start_Receive_IT+0x48>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033e2:	e02d      	b.n	8003440 <UART_Start_Receive_IT+0xa4>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	22ff      	movs	r2, #255	; 0xff
 80033e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033ec:	e028      	b.n	8003440 <UART_Start_Receive_IT+0xa4>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <UART_Start_Receive_IT+0x76>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <UART_Start_Receive_IT+0x6c>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	22ff      	movs	r2, #255	; 0xff
 8003402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003406:	e01b      	b.n	8003440 <UART_Start_Receive_IT+0xa4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	227f      	movs	r2, #127	; 0x7f
 800340c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003410:	e016      	b.n	8003440 <UART_Start_Receive_IT+0xa4>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800341a:	d10d      	bne.n	8003438 <UART_Start_Receive_IT+0x9c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <UART_Start_Receive_IT+0x92>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	227f      	movs	r2, #127	; 0x7f
 8003428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800342c:	e008      	b.n	8003440 <UART_Start_Receive_IT+0xa4>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	223f      	movs	r2, #63	; 0x3f
 8003432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003436:	e003      	b.n	8003440 <UART_Start_Receive_IT+0xa4>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2222      	movs	r2, #34	; 0x22
 800344c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3308      	adds	r3, #8
 8003456:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	657b      	str	r3, [r7, #84]	; 0x54
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003470:	64ba      	str	r2, [r7, #72]	; 0x48
 8003472:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003476:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800347e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d107      	bne.n	800349e <UART_Start_Receive_IT+0x102>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a21      	ldr	r2, [pc, #132]	; (8003520 <UART_Start_Receive_IT+0x184>)
 800349a:	669a      	str	r2, [r3, #104]	; 0x68
 800349c:	e002      	b.n	80034a4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a20      	ldr	r2, [pc, #128]	; (8003524 <UART_Start_Receive_IT+0x188>)
 80034a2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d019      	beq.n	80034e0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80034c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
 80034cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e6      	bne.n	80034ac <UART_Start_Receive_IT+0x110>
 80034de:	e018      	b.n	8003512 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	613b      	str	r3, [r7, #16]
   return(result);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f043 0320 	orr.w	r3, r3, #32
 80034f4:	653b      	str	r3, [r7, #80]	; 0x50
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034fe:	623b      	str	r3, [r7, #32]
 8003500:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	69f9      	ldr	r1, [r7, #28]
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	61bb      	str	r3, [r7, #24]
   return(result);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e6      	bne.n	80034e0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	375c      	adds	r7, #92	; 0x5c
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	08003991 	.word	0x08003991
 8003524:	080037e9 	.word	0x080037e9

08003528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b095      	sub	sp, #84	; 0x54
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354e:	643b      	str	r3, [r7, #64]	; 0x40
 8003550:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e6      	bne.n	8003530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3308      	adds	r3, #8
 8003568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	61fb      	str	r3, [r7, #28]
   return(result);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	64bb      	str	r3, [r7, #72]	; 0x48
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3308      	adds	r3, #8
 8003580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e5      	bne.n	8003562 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800359a:	2b01      	cmp	r3, #1
 800359c:	d118      	bne.n	80035d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f023 0310 	bic.w	r3, r3, #16
 80035b2:	647b      	str	r3, [r7, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	613b      	str	r3, [r7, #16]
   return(result);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e6      	bne.n	800359e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035e4:	bf00      	nop
 80035e6:	3754      	adds	r7, #84	; 0x54
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff fbc6 	bl	8002da0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b08f      	sub	sp, #60	; 0x3c
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003628:	2b21      	cmp	r3, #33	; 0x21
 800362a:	d14d      	bne.n	80036c8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d132      	bne.n	800369e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	61fb      	str	r3, [r7, #28]
   return(result);
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003658:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800365c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e6      	bne.n	8003638 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	60bb      	str	r3, [r7, #8]
   return(result);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6979      	ldr	r1, [r7, #20]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	613b      	str	r3, [r7, #16]
   return(result);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e6      	bne.n	800366a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800369c:	e014      	b.n	80036c8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	b292      	uxth	r2, r2
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80036c8:	bf00      	nop
 80036ca:	373c      	adds	r7, #60	; 0x3c
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b091      	sub	sp, #68	; 0x44
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e0:	2b21      	cmp	r3, #33	; 0x21
 80036e2:	d151      	bne.n	8003788 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d132      	bne.n	8003756 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	623b      	str	r3, [r7, #32]
   return(result);
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
 8003710:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e6      	bne.n	80036f0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	69b9      	ldr	r1, [r7, #24]
 8003746:	69fa      	ldr	r2, [r7, #28]
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	617b      	str	r3, [r7, #20]
   return(result);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e6      	bne.n	8003722 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003754:	e018      	b.n	8003788 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800375c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003768:	b292      	uxth	r2, r2
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003788:	bf00      	nop
 800378a:	3744      	adds	r7, #68	; 0x44
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	613b      	str	r3, [r7, #16]
   return(result);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e6      	bne.n	800379c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fc fe5e 	bl	800049c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e0:	bf00      	nop
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b09c      	sub	sp, #112	; 0x70
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003800:	2b22      	cmp	r3, #34	; 0x22
 8003802:	f040 80b9 	bne.w	8003978 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800380c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003810:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003814:	b2d9      	uxtb	r1, r3
 8003816:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800381a:	b2da      	uxtb	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	400a      	ands	r2, r1
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 809c 	bne.w	8003988 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800385e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003860:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003864:	66bb      	str	r3, [r7, #104]	; 0x68
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800386e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003870:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003874:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e6      	bne.n	8003850 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3308      	adds	r3, #8
 8003888:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	667b      	str	r3, [r7, #100]	; 0x64
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3308      	adds	r3, #8
 80038a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80038a2:	647a      	str	r2, [r7, #68]	; 0x44
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e5      	bne.n	8003882 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d018      	beq.n	800390a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	623b      	str	r3, [r7, #32]
   return(result);
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ec:	663b      	str	r3, [r7, #96]	; 0x60
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
 80038f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e6      	bne.n	80038d8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	2b01      	cmp	r3, #1
 8003910:	d12e      	bne.n	8003970 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	60fb      	str	r3, [r7, #12]
   return(result);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f023 0310 	bic.w	r3, r3, #16
 800392c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003936:	61fb      	str	r3, [r7, #28]
 8003938:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	617b      	str	r3, [r7, #20]
   return(result);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e6      	bne.n	8003918 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b10      	cmp	r3, #16
 8003956:	d103      	bne.n	8003960 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2210      	movs	r2, #16
 800395e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003966:	4619      	mov	r1, r3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff fa23 	bl	8002db4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800396e:	e00b      	b.n	8003988 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fc fd7d 	bl	8000470 <HAL_UART_RxCpltCallback>
}
 8003976:	e007      	b.n	8003988 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0208 	orr.w	r2, r2, #8
 8003986:	619a      	str	r2, [r3, #24]
}
 8003988:	bf00      	nop
 800398a:	3770      	adds	r7, #112	; 0x70
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b09c      	sub	sp, #112	; 0x70
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800399e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a8:	2b22      	cmp	r3, #34	; 0x22
 80039aa:	f040 80b9 	bne.w	8003b20 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80039be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80039c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80039c6:	4013      	ands	r3, r2
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d2:	1c9a      	adds	r2, r3, #2
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 809c 	bne.w	8003b30 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a16:	657b      	str	r3, [r7, #84]	; 0x54
 8003a18:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e6      	bne.n	80039f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	663b      	str	r3, [r7, #96]	; 0x60
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a4a:	643a      	str	r2, [r7, #64]	; 0x40
 8003a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d12e      	bne.n	8003b18 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f023 0310 	bic.w	r3, r3, #16
 8003ad4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6979      	ldr	r1, [r7, #20]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	613b      	str	r3, [r7, #16]
   return(result);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e6      	bne.n	8003ac0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b10      	cmp	r3, #16
 8003afe:	d103      	bne.n	8003b08 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2210      	movs	r2, #16
 8003b06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff f94f 	bl	8002db4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b16:	e00b      	b.n	8003b30 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fc fca9 	bl	8000470 <HAL_UART_RxCpltCallback>
}
 8003b1e:	e007      	b.n	8003b30 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	619a      	str	r2, [r3, #24]
}
 8003b30:	bf00      	nop
 8003b32:	3770      	adds	r7, #112	; 0x70
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <memset>:
 8003b4c:	4402      	add	r2, r0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d100      	bne.n	8003b56 <memset+0xa>
 8003b54:	4770      	bx	lr
 8003b56:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5a:	e7f9      	b.n	8003b50 <memset+0x4>

08003b5c <__libc_init_array>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	4d0d      	ldr	r5, [pc, #52]	; (8003b94 <__libc_init_array+0x38>)
 8003b60:	4c0d      	ldr	r4, [pc, #52]	; (8003b98 <__libc_init_array+0x3c>)
 8003b62:	1b64      	subs	r4, r4, r5
 8003b64:	10a4      	asrs	r4, r4, #2
 8003b66:	2600      	movs	r6, #0
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d109      	bne.n	8003b80 <__libc_init_array+0x24>
 8003b6c:	4d0b      	ldr	r5, [pc, #44]	; (8003b9c <__libc_init_array+0x40>)
 8003b6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ba0 <__libc_init_array+0x44>)
 8003b70:	f000 f818 	bl	8003ba4 <_init>
 8003b74:	1b64      	subs	r4, r4, r5
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	2600      	movs	r6, #0
 8003b7a:	42a6      	cmp	r6, r4
 8003b7c:	d105      	bne.n	8003b8a <__libc_init_array+0x2e>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b84:	4798      	blx	r3
 8003b86:	3601      	adds	r6, #1
 8003b88:	e7ee      	b.n	8003b68 <__libc_init_array+0xc>
 8003b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8e:	4798      	blx	r3
 8003b90:	3601      	adds	r6, #1
 8003b92:	e7f2      	b.n	8003b7a <__libc_init_array+0x1e>
 8003b94:	08003bf4 	.word	0x08003bf4
 8003b98:	08003bf4 	.word	0x08003bf4
 8003b9c:	08003bf4 	.word	0x08003bf4
 8003ba0:	08003bf8 	.word	0x08003bf8

08003ba4 <_init>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr

08003bb0 <_fini>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr
