
uart-to-uart-to-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be0  08003be0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003be0  08003be0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003be0  08003be0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000013c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a58c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001aa7  00000000  00000000  0002a60b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000770  00000000  00000000  0002c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005af  00000000  00000000  0002c828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f363  00000000  00000000  0002cdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a5b7  00000000  00000000  0004c13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b9159  00000000  00000000  000566f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ce4  00000000  00000000  0010f84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00111530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b90 	.word	0x08003b90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b90 	.word	0x08003b90

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 facd 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f82d 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8e9 	bl	80003ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001da:	f000 f887 	bl	80002ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f8b5 	bl	800034c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  for (unsigned char i = 0; i < BUFFER_SIZE; i++) {
 80001e2:	2300      	movs	r3, #0
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	e00c      	b.n	8000202 <main+0x3a>
  	  transmitBuffer[i] = i + 1;
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	79fa      	ldrb	r2, [r7, #7]
 80001ec:	3201      	adds	r2, #1
 80001ee:	b2d1      	uxtb	r1, r2
 80001f0:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <main+0x58>)
 80001f2:	54d1      	strb	r1, [r2, r3]
  	  receiveBuffer[i] = 0;
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <main+0x5c>)
 80001f8:	2100      	movs	r1, #0
 80001fa:	54d1      	strb	r1, [r2, r3]
  for (unsigned char i = 0; i < BUFFER_SIZE; i++) {
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	3301      	adds	r3, #1
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2b03      	cmp	r3, #3
 8000206:	d9ef      	bls.n	80001e8 <main+0x20>
  }
  HAL_UART_Receive_IT(&huart1, receiveBuffer, BUFFER_SIZE);
 8000208:	2204      	movs	r2, #4
 800020a:	4906      	ldr	r1, [pc, #24]	; (8000224 <main+0x5c>)
 800020c:	4806      	ldr	r0, [pc, #24]	; (8000228 <main+0x60>)
 800020e:	f002 fa93 	bl	8002738 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart2, transmitBuffer, BUFFER_SIZE);
 8000212:	2204      	movs	r2, #4
 8000214:	4902      	ldr	r1, [pc, #8]	; (8000220 <main+0x58>)
 8000216:	4805      	ldr	r0, [pc, #20]	; (800022c <main+0x64>)
 8000218:	f002 fa30 	bl	800267c <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x54>
 800021e:	bf00      	nop
 8000220:	20000138 	.word	0x20000138
 8000224:	2000013c 	.word	0x2000013c
 8000228:	20000028 	.word	0x20000028
 800022c:	200000b0 	.word	0x200000b0

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 fc7a 	bl	8003b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 031c 	add.w	r3, r7, #28
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000280:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000282:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000286:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fdfd 	bl	8000e8c <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000298:	f000 f938 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002a8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80002ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 031c 	add.w	r3, r7, #28
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fe24 	bl	8001f08 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002c6:	f000 f921 	bl	800050c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 f84d 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002e0:	f000 f914 	bl	800050c <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3758      	adds	r7, #88	; 0x58
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f0:	4b14      	ldr	r3, [pc, #80]	; (8000344 <MX_USART1_UART_Init+0x58>)
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <MX_USART1_UART_Init+0x5c>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80002f6:	4b13      	ldr	r3, [pc, #76]	; (8000344 <MX_USART1_UART_Init+0x58>)
 80002f8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80002fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_USART1_UART_Init+0x58>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART1_UART_Init+0x58>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000324:	2200      	movs	r2, #0
 8000326:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_USART1_UART_Init+0x58>)
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_USART1_UART_Init+0x58>)
 8000330:	f002 f956 	bl	80025e0 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800033a:	f000 f8e7 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000028 	.word	0x20000028
 8000348:	40013800 	.word	0x40013800

0800034c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000350:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000352:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <MX_USART2_UART_Init+0x5c>)
 8000354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000358:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800035c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_USART2_UART_Init+0x58>)
 8000390:	f002 f926 	bl	80025e0 <HAL_UART_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800039a:	f000 f8b7 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000b0 	.word	0x200000b0
 80003a8:	40004400 	.word	0x40004400

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 030c 	add.w	r3, r7, #12
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a28      	ldr	r2, [pc, #160]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b26      	ldr	r3, [pc, #152]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003d6:	60bb      	str	r3, [r7, #8]
 80003d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003da:	4b23      	ldr	r3, [pc, #140]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	4a22      	ldr	r2, [pc, #136]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003e4:	6153      	str	r3, [r2, #20]
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <MX_GPIO_Init+0xbc>)
 80003f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_GPIO_Init+0xbc>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2120      	movs	r1, #32
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f000 fd0b 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800041a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800041c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000422:	2301      	movs	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	4619      	mov	r1, r3
 800042c:	480f      	ldr	r0, [pc, #60]	; (800046c <MX_GPIO_Init+0xc0>)
 800042e:	f000 fb8b 	bl	8000b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000432:	2320      	movs	r3, #32
 8000434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	2301      	movs	r3, #1
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	4619      	mov	r1, r3
 8000448:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044c:	f000 fb7c 	bl	8000b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	2028      	movs	r0, #40	; 0x28
 8000456:	f000 faca 	bl	80009ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800045a:	2028      	movs	r0, #40	; 0x28
 800045c:	f000 fae3 	bl	8000a26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	48000800 	.word	0x48000800

08000470 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// Для того, чтобы отследить момент окончания передачи, либо приема существуют callback-функции:
// При дебаге, внутри колбэк функций, время таймера отличается от реального
// (то есть в колбэке может пройти 100 итераций, а дебаг захватит только 1)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a05      	ldr	r2, [pc, #20]	; (8000494 <HAL_UART_RxCpltCallback+0x24>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d102      	bne.n	8000488 <HAL_UART_RxCpltCallback+0x18>
	  // USART1 завершил прием данных
	  isReceived = true;
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_UART_RxCpltCallback+0x28>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
  }
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40013800 	.word	0x40013800
 8000498:	20000140 	.word	0x20000140

0800049c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <HAL_UART_TxCpltCallback+0x24>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d102      	bne.n	80004b4 <HAL_UART_TxCpltCallback+0x18>
	  // USART2 завершил отправку данных
	  isTransive = true;
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <HAL_UART_TxCpltCallback+0x28>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
  }
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40004400 	.word	0x40004400
 80004c4:	20000141 	.word	0x20000141

080004c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13) {
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d8:	d112      	bne.n	8000500 <HAL_GPIO_EXTI_Callback+0x38>
	  if (!(GPIOC -> IDR & (1 << 1))) {
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_GPIO_EXTI_Callback+0x40>)
 80004dc:	691b      	ldr	r3, [r3, #16]
 80004de:	f003 0302 	and.w	r3, r3, #2
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d106      	bne.n	80004f4 <HAL_GPIO_EXTI_Callback+0x2c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2120      	movs	r1, #32
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f000 fc9d 	bl	8000e2c <HAL_GPIO_WritePin>
//
//	  } else {
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
//	  }
  }
}
 80004f2:	e005      	b.n	8000500 <HAL_GPIO_EXTI_Callback+0x38>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fc:	f000 fc96 	bl	8000e2c <HAL_GPIO_WritePin>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	48000800 	.word	0x48000800

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>
	...

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <HAL_MspInit+0x44>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_MspInit+0x44>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_MspInit+0x44>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_MspInit+0x44>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_MspInit+0x44>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a36      	ldr	r2, [pc, #216]	; (8000658 <HAL_UART_MspInit+0xf8>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d130      	bne.n	80005e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000582:	4b36      	ldr	r3, [pc, #216]	; (800065c <HAL_UART_MspInit+0xfc>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a35      	ldr	r2, [pc, #212]	; (800065c <HAL_UART_MspInit+0xfc>)
 8000588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b33      	ldr	r3, [pc, #204]	; (800065c <HAL_UART_MspInit+0xfc>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b30      	ldr	r3, [pc, #192]	; (800065c <HAL_UART_MspInit+0xfc>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a2f      	ldr	r2, [pc, #188]	; (800065c <HAL_UART_MspInit+0xfc>)
 80005a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b2d      	ldr	r3, [pc, #180]	; (800065c <HAL_UART_MspInit+0xfc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005b2:	2330      	movs	r3, #48	; 0x30
 80005b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005c2:	2307      	movs	r3, #7
 80005c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	4824      	ldr	r0, [pc, #144]	; (8000660 <HAL_UART_MspInit+0x100>)
 80005ce:	f000 fabb 	bl	8000b48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2025      	movs	r0, #37	; 0x25
 80005d8:	f000 fa09 	bl	80009ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005dc:	2025      	movs	r0, #37	; 0x25
 80005de:	f000 fa22 	bl	8000a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e2:	e035      	b.n	8000650 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a1e      	ldr	r2, [pc, #120]	; (8000664 <HAL_UART_MspInit+0x104>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d130      	bne.n	8000650 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <HAL_UART_MspInit+0xfc>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a1a      	ldr	r2, [pc, #104]	; (800065c <HAL_UART_MspInit+0xfc>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_UART_MspInit+0xfc>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_UART_MspInit+0xfc>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <HAL_UART_MspInit+0xfc>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_UART_MspInit+0xfc>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800062e:	2307      	movs	r3, #7
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fa84 	bl	8000b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2026      	movs	r0, #38	; 0x26
 8000646:	f000 f9d2 	bl	80009ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800064a:	2026      	movs	r0, #38	; 0x26
 800064c:	f000 f9eb 	bl	8000a26 <HAL_NVIC_EnableIRQ>
}
 8000650:	bf00      	nop
 8000652:	3730      	adds	r7, #48	; 0x30
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40013800 	.word	0x40013800
 800065c:	40021000 	.word	0x40021000
 8000660:	48000800 	.word	0x48000800
 8000664:	40004400 	.word	0x40004400

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <MemManage_Handler+0x4>

0800067a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <UsageFault_Handler+0x4>

08000686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b4:	f000 f8a0 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}

080006bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <USART1_IRQHandler+0x10>)
 80006c2:	f002 f87d 	bl	80027c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000028 	.word	0x20000028

080006d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <USART2_IRQHandler+0x10>)
 80006d6:	f002 f873 	bl	80027c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000b0 	.word	0x200000b0

080006e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006ec:	f000 fbb6 	bl	8000e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <SystemInit+0x20>)
 80006fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <SystemInit+0x20>)
 8000700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000750 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800071c:	f7ff ffea 	bl	80006f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000746:	f003 f9ff 	bl	8003b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800074a:	f7ff fd3d 	bl	80001c8 <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000750:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800075c:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 8000760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000764:	20000148 	.word	0x20000148

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>
	...

0800076c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_Init+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_Init+0x28>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 f92b 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000782:	200f      	movs	r0, #15
 8000784:	f000 f808 	bl	8000798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000788:	f7ff fec6 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x54>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x58>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f943 	bl	8000a42 <HAL_SYSTICK_Config>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e00e      	b.n	80007e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b0f      	cmp	r3, #15
 80007ca:	d80a      	bhi.n	80007e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007cc:	2200      	movs	r2, #0
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d4:	f000 f90b 	bl	80009ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d8:	4a06      	ldr	r2, [pc, #24]	; (80007f4 <HAL_InitTick+0x5c>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007de:	2300      	movs	r3, #0
 80007e0:	e000      	b.n	80007e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000144 	.word	0x20000144

08000820 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;  
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000144 	.word	0x20000144

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <__NVIC_GetPriorityGrouping+0x18>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	0a1b      	lsrs	r3, r3, #8
 800088a:	f003 0307 	and.w	r3, r3, #7
}
 800088e:	4618      	mov	r0, r3
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	db0b      	blt.n	80008c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f003 021f 	and.w	r2, r3, #31
 80008b4:	4907      	ldr	r1, [pc, #28]	; (80008d4 <__NVIC_EnableIRQ+0x38>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	095b      	lsrs	r3, r3, #5
 80008bc:	2001      	movs	r0, #1
 80008be:	fa00 f202 	lsl.w	r2, r0, r2
 80008c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b8:	f7ff ff8e 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff29 	bl	8000838 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff3e 	bl	8000880 <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff8e 	bl	800092c <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5d 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff31 	bl	800089c <__NVIC_EnableIRQ>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ffa2 	bl	8000994 <SysTick_Config>
 8000a50:	4603      	mov	r3, r0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d008      	beq.n	8000a7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2204      	movs	r2, #4
 8000a70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e020      	b.n	8000ac0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 020e 	bic.w	r2, r2, #14
 8000a8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0201 	bic.w	r2, r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d005      	beq.n	8000aee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	e027      	b.n	8000b3e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f022 020e 	bic.w	r2, r2, #14
 8000afc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f022 0201 	bic.w	r2, r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b16:	2101      	movs	r1, #1
 8000b18:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2201      	movs	r2, #1
 8000b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	4798      	blx	r3
    } 
  }
  return status;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b087      	sub	sp, #28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b56:	e14e      	b.n	8000df6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 8140 	beq.w	8000df0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d005      	beq.n	8000b88 <HAL_GPIO_Init+0x40>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d130      	bne.n	8000bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	2203      	movs	r2, #3
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	091b      	lsrs	r3, r3, #4
 8000bd4:	f003 0201 	and.w	r2, r3, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d017      	beq.n	8000c26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	d123      	bne.n	8000c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	08da      	lsrs	r2, r3, #3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3208      	adds	r2, #8
 8000c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	220f      	movs	r2, #15
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	691a      	ldr	r2, [r3, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	08da      	lsrs	r2, r3, #3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3208      	adds	r2, #8
 8000c74:	6939      	ldr	r1, [r7, #16]
 8000c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 0203 	and.w	r2, r3, #3
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 809a 	beq.w	8000df0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbc:	4b55      	ldr	r3, [pc, #340]	; (8000e14 <HAL_GPIO_Init+0x2cc>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a54      	ldr	r2, [pc, #336]	; (8000e14 <HAL_GPIO_Init+0x2cc>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b52      	ldr	r3, [pc, #328]	; (8000e14 <HAL_GPIO_Init+0x2cc>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd4:	4a50      	ldr	r2, [pc, #320]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	220f      	movs	r2, #15
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cfe:	d013      	beq.n	8000d28 <HAL_GPIO_Init+0x1e0>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a46      	ldr	r2, [pc, #280]	; (8000e1c <HAL_GPIO_Init+0x2d4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00d      	beq.n	8000d24 <HAL_GPIO_Init+0x1dc>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a45      	ldr	r2, [pc, #276]	; (8000e20 <HAL_GPIO_Init+0x2d8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d007      	beq.n	8000d20 <HAL_GPIO_Init+0x1d8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a44      	ldr	r2, [pc, #272]	; (8000e24 <HAL_GPIO_Init+0x2dc>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_GPIO_Init+0x1d4>
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e006      	b.n	8000d2a <HAL_GPIO_Init+0x1e2>
 8000d1c:	2305      	movs	r3, #5
 8000d1e:	e004      	b.n	8000d2a <HAL_GPIO_Init+0x1e2>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e002      	b.n	8000d2a <HAL_GPIO_Init+0x1e2>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <HAL_GPIO_Init+0x1e2>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	f002 0203 	and.w	r2, r2, #3
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4093      	lsls	r3, r2
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d3a:	4937      	ldr	r1, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x2d0>)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d48:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d6c:	4a2e      	ldr	r2, [pc, #184]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d72:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d96:	4a24      	ldr	r2, [pc, #144]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d9c:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dea:	4a0f      	ldr	r2, [pc, #60]	; (8000e28 <HAL_GPIO_Init+0x2e0>)
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f47f aea9 	bne.w	8000b58 <HAL_GPIO_Init+0x10>
  }
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	371c      	adds	r7, #28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	48000800 	.word	0x48000800
 8000e24:	48000c00 	.word	0x48000c00
 8000e28:	40010400 	.word	0x40010400

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4a:	887a      	ldrh	r2, [r7, #2]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb24 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	f001 b823 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 817d 	beq.w	80011c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ec8:	4bbc      	ldr	r3, [pc, #752]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d00c      	beq.n	8000eee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed4:	4bb9      	ldr	r3, [pc, #740]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d15c      	bne.n	8000f9a <HAL_RCC_OscConfig+0x10e>
 8000ee0:	4bb6      	ldr	r3, [pc, #728]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eec:	d155      	bne.n	8000f9a <HAL_RCC_OscConfig+0x10e>
 8000eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000efa:	fa93 f3a3 	rbit	r3, r3
 8000efe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f06:	fab3 f383 	clz	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	095b      	lsrs	r3, r3, #5
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d102      	bne.n	8000f20 <HAL_RCC_OscConfig+0x94>
 8000f1a:	4ba8      	ldr	r3, [pc, #672]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	e015      	b.n	8000f4c <HAL_RCC_OscConfig+0xc0>
 8000f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f24:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f38:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f48:	4b9c      	ldr	r3, [pc, #624]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f50:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f58:	fa92 f2a2 	rbit	r2, r2
 8000f5c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f64:	fab2 f282 	clz	r2, r2
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	f042 0220 	orr.w	r2, r2, #32
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	f002 021f 	and.w	r2, r2, #31
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 811f 	beq.w	80011c0 <HAL_RCC_OscConfig+0x334>
 8000f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f040 8116 	bne.w	80011c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	f000 bfaf 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000faa:	d106      	bne.n	8000fba <HAL_RCC_OscConfig+0x12e>
 8000fac:	4b83      	ldr	r3, [pc, #524]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a82      	ldr	r2, [pc, #520]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e036      	b.n	8001028 <HAL_RCC_OscConfig+0x19c>
 8000fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x158>
 8000fca:	4b7c      	ldr	r3, [pc, #496]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a7b      	ldr	r2, [pc, #492]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b79      	ldr	r3, [pc, #484]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a78      	ldr	r2, [pc, #480]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e021      	b.n	8001028 <HAL_RCC_OscConfig+0x19c>
 8000fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x184>
 8000ff6:	4b71      	ldr	r3, [pc, #452]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a70      	ldr	r2, [pc, #448]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b6e      	ldr	r3, [pc, #440]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6d      	ldr	r2, [pc, #436]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e00b      	b.n	8001028 <HAL_RCC_OscConfig+0x19c>
 8001010:	4b6a      	ldr	r3, [pc, #424]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a69      	ldr	r2, [pc, #420]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8001016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b67      	ldr	r3, [pc, #412]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a66      	ldr	r2, [pc, #408]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8001022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001026:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001028:	4b64      	ldr	r3, [pc, #400]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	f023 020f 	bic.w	r2, r3, #15
 8001030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	495f      	ldr	r1, [pc, #380]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 800103e:	4313      	orrs	r3, r2
 8001040:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d059      	beq.n	8001106 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001052:	f7ff fbe5 	bl	8000820 <HAL_GetTick>
 8001056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	e00a      	b.n	8001072 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105c:	f7ff fbe0 	bl	8000820 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b64      	cmp	r3, #100	; 0x64
 800106a:	d902      	bls.n	8001072 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	f000 bf43 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>
 8001072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001076:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001086:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	095b      	lsrs	r3, r3, #5
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d102      	bne.n	80010a4 <HAL_RCC_OscConfig+0x218>
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	e015      	b.n	80010d0 <HAL_RCC_OscConfig+0x244>
 80010a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010b0:	fa93 f3a3 	rbit	r3, r3
 80010b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010c4:	fa93 f3a3 	rbit	r3, r3
 80010c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010cc:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010dc:	fa92 f2a2 	rbit	r2, r2
 80010e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010e8:	fab2 f282 	clz	r2, r2
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	f042 0220 	orr.w	r2, r2, #32
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	f002 021f 	and.w	r2, r2, #31
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0ab      	beq.n	800105c <HAL_RCC_OscConfig+0x1d0>
 8001104:	e05d      	b.n	80011c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fb8b 	bl	8000820 <HAL_GetTick>
 800110a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110e:	e00a      	b.n	8001126 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001110:	f7ff fb86 	bl	8000820 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b64      	cmp	r3, #100	; 0x64
 800111e:	d902      	bls.n	8001126 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	f000 bee9 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>
 8001126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800113a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	fab3 f383 	clz	r3, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d102      	bne.n	8001158 <HAL_RCC_OscConfig+0x2cc>
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	e015      	b.n	8001184 <HAL_RCC_OscConfig+0x2f8>
 8001158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800116c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001170:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001174:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_RCC_OscConfig+0x330>)
 8001182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001184:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001188:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800118c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001190:	fa92 f2a2 	rbit	r2, r2
 8001194:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001198:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800119c:	fab2 f282 	clz	r2, r2
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	f042 0220 	orr.w	r2, r2, #32
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	f002 021f 	and.w	r2, r2, #31
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ab      	bne.n	8001110 <HAL_RCC_OscConfig+0x284>
 80011b8:	e003      	b.n	80011c2 <HAL_RCC_OscConfig+0x336>
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 817d 	beq.w	80014d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011d8:	4ba6      	ldr	r3, [pc, #664]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 030c 	and.w	r3, r3, #12
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00b      	beq.n	80011fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011e4:	4ba3      	ldr	r3, [pc, #652]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d172      	bne.n	80012d6 <HAL_RCC_OscConfig+0x44a>
 80011f0:	4ba0      	ldr	r3, [pc, #640]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d16c      	bne.n	80012d6 <HAL_RCC_OscConfig+0x44a>
 80011fc:	2302      	movs	r3, #2
 80011fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800120e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	095b      	lsrs	r3, r3, #5
 800121a:	b2db      	uxtb	r3, r3
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <HAL_RCC_OscConfig+0x3a0>
 8001226:	4b93      	ldr	r3, [pc, #588]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	e013      	b.n	8001254 <HAL_RCC_OscConfig+0x3c8>
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001244:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001250:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	2202      	movs	r2, #2
 8001256:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800125a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800125e:	fa92 f2a2 	rbit	r2, r2
 8001262:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001266:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800126a:	fab2 f282 	clz	r2, r2
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	f042 0220 	orr.w	r2, r2, #32
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	f002 021f 	and.w	r2, r2, #31
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f202 	lsl.w	r2, r1, r2
 8001280:	4013      	ands	r3, r2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <HAL_RCC_OscConfig+0x410>
 8001286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d002      	beq.n	800129c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	f000 be2e 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b75      	ldr	r3, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	21f8      	movs	r1, #248	; 0xf8
 80012b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012ba:	fa91 f1a1 	rbit	r1, r1
 80012be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012c6:	fab1 f181 	clz	r1, r1
 80012ca:	b2c9      	uxtb	r1, r1
 80012cc:	408b      	lsls	r3, r1
 80012ce:	4969      	ldr	r1, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d4:	e0fd      	b.n	80014d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 8088 	beq.w	80013f8 <HAL_RCC_OscConfig+0x56c>
 80012e8:	2301      	movs	r3, #1
 80012ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fe:	fab3 f383 	clz	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001308:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	461a      	mov	r2, r3
 8001310:	2301      	movs	r3, #1
 8001312:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fa84 	bl	8000820 <HAL_GetTick>
 8001318:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fa7f 	bl	8000820 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d902      	bls.n	8001334 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	f000 bde2 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001346:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	095b      	lsrs	r3, r3, #5
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d102      	bne.n	8001364 <HAL_RCC_OscConfig+0x4d8>
 800135e:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	e013      	b.n	800138c <HAL_RCC_OscConfig+0x500>
 8001364:	2302      	movs	r3, #2
 8001366:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800137c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001388:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	2202      	movs	r2, #2
 800138e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001392:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001396:	fa92 f2a2 	rbit	r2, r2
 800139a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800139e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f002 021f 	and.w	r2, r2, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f202 	lsl.w	r2, r1, r2
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0af      	beq.n	800131e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013be:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	21f8      	movs	r1, #248	; 0xf8
 80013d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013dc:	fa91 f1a1 	rbit	r1, r1
 80013e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013e8:	fab1 f181 	clz	r1, r1
 80013ec:	b2c9      	uxtb	r1, r1
 80013ee:	408b      	lsls	r3, r1
 80013f0:	4920      	ldr	r1, [pc, #128]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
 80013f6:	e06c      	b.n	80014d2 <HAL_RCC_OscConfig+0x646>
 80013f8:	2301      	movs	r3, #1
 80013fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800140a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001418:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	461a      	mov	r2, r3
 8001420:	2300      	movs	r3, #0
 8001422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff f9fc 	bl	8000820 <HAL_GetTick>
 8001428:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142e:	f7ff f9f7 	bl	8000820 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d902      	bls.n	8001444 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	f000 bd5a 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	fab3 f383 	clz	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	095b      	lsrs	r3, r3, #5
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b01      	cmp	r3, #1
 800146c:	d104      	bne.n	8001478 <HAL_RCC_OscConfig+0x5ec>
 800146e:	4b01      	ldr	r3, [pc, #4]	; (8001474 <HAL_RCC_OscConfig+0x5e8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	e015      	b.n	80014a0 <HAL_RCC_OscConfig+0x614>
 8001474:	40021000 	.word	0x40021000
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001490:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800149c:	4bc8      	ldr	r3, [pc, #800]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	2202      	movs	r2, #2
 80014a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014aa:	fa92 f2a2 	rbit	r2, r2
 80014ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014b6:	fab2 f282 	clz	r2, r2
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	f042 0220 	orr.w	r2, r2, #32
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	f002 021f 	and.w	r2, r2, #31
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ad      	bne.n	800142e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8110 	beq.w	8001708 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d079      	beq.n	80015ec <HAL_RCC_OscConfig+0x760>
 80014f8:	2301      	movs	r3, #1
 80014fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800150a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	4bab      	ldr	r3, [pc, #684]	; (80017c4 <HAL_RCC_OscConfig+0x938>)
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	461a      	mov	r2, r3
 800151e:	2301      	movs	r3, #1
 8001520:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff f97d 	bl	8000820 <HAL_GetTick>
 8001526:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	e00a      	b.n	8001542 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff f978 	bl	8000820 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d902      	bls.n	8001542 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	f000 bcdb 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001558:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800155c:	2202      	movs	r2, #2
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001564:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f2a3 	rbit	r2, r3
 800156e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001580:	2202      	movs	r2, #2
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f2a3 	rbit	r2, r3
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800159a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159c:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 800159e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015a8:	2102      	movs	r1, #2
 80015aa:	6019      	str	r1, [r3, #0]
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f1a3 	rbit	r1, r3
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015c2:	6019      	str	r1, [r3, #0]
  return result;
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0a0      	beq.n	800152c <HAL_RCC_OscConfig+0x6a0>
 80015ea:	e08d      	b.n	8001708 <HAL_RCC_OscConfig+0x87c>
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800160e:	601a      	str	r2, [r3, #0]
  return result;
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001618:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <HAL_RCC_OscConfig+0x938>)
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	461a      	mov	r2, r3
 800162a:	2300      	movs	r3, #0
 800162c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff f8f7 	bl	8000820 <HAL_GetTick>
 8001632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff f8f2 	bl	8000820 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d902      	bls.n	800164e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	f000 bc55 	b.w	8001ef8 <HAL_RCC_OscConfig+0x106c>
 800164e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001652:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001656:	2202      	movs	r2, #2
 8001658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fa93 f2a3 	rbit	r2, r3
 8001668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001676:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800167a:	2202      	movs	r2, #2
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001682:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 80016bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016c6:	2102      	movs	r1, #2
 80016c8:	6019      	str	r1, [r3, #0]
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	fa93 f1a3 	rbit	r1, r3
 80016d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016e0:	6019      	str	r1, [r3, #0]
  return result;
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fab3 f383 	clz	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	2101      	movs	r1, #1
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d197      	bne.n	8001638 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 81a1 	beq.w	8001a60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 8001736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173a:	61d3      	str	r3, [r2, #28]
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001748:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001752:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001756:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001758:	2301      	movs	r3, #1
 800175a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_RCC_OscConfig+0x93c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d11a      	bne.n	80017a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_RCC_OscConfig+0x93c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <HAL_RCC_OscConfig+0x93c>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff f853 	bl	8000820 <HAL_GetTick>
 800177a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177e:	e009      	b.n	8001794 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001780:	f7ff f84e 	bl	8000820 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	; 0x64
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e3b1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCC_OscConfig+0x93c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ef      	beq.n	8001780 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d10d      	bne.n	80017cc <HAL_RCC_OscConfig+0x940>
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a02      	ldr	r2, [pc, #8]	; (80017c0 <HAL_RCC_OscConfig+0x934>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e03c      	b.n	8001838 <HAL_RCC_OscConfig+0x9ac>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	10908120 	.word	0x10908120
 80017c8:	40007000 	.word	0x40007000
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x96a>
 80017dc:	4bc1      	ldr	r3, [pc, #772]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4ac0      	ldr	r2, [pc, #768]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	4bbe      	ldr	r3, [pc, #760]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4abd      	ldr	r2, [pc, #756]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e020      	b.n	8001838 <HAL_RCC_OscConfig+0x9ac>
 80017f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x994>
 8001806:	4bb7      	ldr	r3, [pc, #732]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4ab6      	ldr	r2, [pc, #728]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4bb4      	ldr	r3, [pc, #720]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4ab3      	ldr	r2, [pc, #716]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0x9ac>
 8001820:	4bb0      	ldr	r3, [pc, #704]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4aaf      	ldr	r2, [pc, #700]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	4bad      	ldr	r3, [pc, #692]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4aac      	ldr	r2, [pc, #688]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001832:	f023 0304 	bic.w	r3, r3, #4
 8001836:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8081 	beq.w	800194c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7fe ffe9 	bl	8000820 <HAL_GetTick>
 800184e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001854:	f7fe ffe4 	bl	8000820 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e345      	b.n	8001ef8 <HAL_RCC_OscConfig+0x106c>
 800186c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001870:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001894:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001898:	2202      	movs	r2, #2
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	fa93 f2a3 	rbit	r2, r3
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018b2:	601a      	str	r2, [r3, #0]
  return result;
 80018b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d102      	bne.n	80018d8 <HAL_RCC_OscConfig+0xa4c>
 80018d2:	4b84      	ldr	r3, [pc, #528]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	e013      	b.n	8001900 <HAL_RCC_OscConfig+0xa74>
 80018d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018e0:	2202      	movs	r2, #2
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	4b79      	ldr	r3, [pc, #484]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001904:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001908:	2102      	movs	r1, #2
 800190a:	6011      	str	r1, [r2, #0]
 800190c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001910:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	fa92 f1a2 	rbit	r1, r2
 800191a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800191e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001922:	6011      	str	r1, [r2, #0]
  return result;
 8001924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001928:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	fab2 f282 	clz	r2, r2
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f002 021f 	and.w	r2, r2, #31
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d084      	beq.n	8001854 <HAL_RCC_OscConfig+0x9c8>
 800194a:	e07f      	b.n	8001a4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7fe ff68 	bl	8000820 <HAL_GetTick>
 8001950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	e00b      	b.n	800196e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7fe ff63 	bl	8000820 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e2c4      	b.n	8001ef8 <HAL_RCC_OscConfig+0x106c>
 800196e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001972:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001996:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019b4:	601a      	str	r2, [r3, #0]
  return result;
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d102      	bne.n	80019da <HAL_RCC_OscConfig+0xb4e>
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	e013      	b.n	8001a02 <HAL_RCC_OscConfig+0xb76>
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	6011      	str	r1, [r2, #0]
 8001a0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	fa92 f1a2 	rbit	r1, r2
 8001a1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a24:	6011      	str	r1, [r2, #0]
  return result;
 8001a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	fab2 f282 	clz	r2, r2
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f002 021f 	and.w	r2, r2, #31
 8001a40:	2101      	movs	r1, #1
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d184      	bne.n	8001956 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	4a22      	ldr	r2, [pc, #136]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8242 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_RCC_OscConfig+0xc58>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	f000 8213 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	f040 8162 	bne.w	8001d56 <HAL_RCC_OscConfig+0xeca>
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ab6:	601a      	str	r2, [r3, #0]
  return result;
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ac0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001acc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7fe fea2 	bl	8000820 <HAL_GetTick>
 8001adc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e00c      	b.n	8001afc <HAL_RCC_OscConfig+0xc70>
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7fe fe9a 	bl	8000820 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1fd      	b.n	8001ef8 <HAL_RCC_OscConfig+0x106c>
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b20:	601a      	str	r2, [r3, #0]
  return result;
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0xcba>
 8001b40:	4bb0      	ldr	r3, [pc, #704]	; (8001e04 <HAL_RCC_OscConfig+0xf78>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e027      	b.n	8001b96 <HAL_RCC_OscConfig+0xd0a>
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	fa93 f2a3 	rbit	r2, r3
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	4b9c      	ldr	r3, [pc, #624]	; (8001e04 <HAL_RCC_OscConfig+0xf78>)
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ba2:	6011      	str	r1, [r2, #0]
 8001ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	fa92 f1a2 	rbit	r1, r2
 8001bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bba:	6011      	str	r1, [r2, #0]
  return result;
 8001bbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	fab2 f282 	clz	r2, r2
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f042 0220 	orr.w	r2, r2, #32
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	f002 021f 	and.w	r2, r2, #31
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d182      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be2:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0xf78>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	497f      	ldr	r1, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0xf78>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c2e:	601a      	str	r2, [r3, #0]
  return result;
 8001c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7fe fde6 	bl	8000820 <HAL_GetTick>
 8001c54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe fde1 	bl	8000820 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e144      	b.n	8001ef8 <HAL_RCC_OscConfig+0x106c>
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c92:	601a      	str	r2, [r3, #0]
  return result;
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xe2c>
 8001cb2:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <HAL_RCC_OscConfig+0xf78>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	e027      	b.n	8001d08 <HAL_RCC_OscConfig+0xe7c>
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fa93 f2a3 	rbit	r2, r3
 8001cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <HAL_RCC_OscConfig+0xf78>)
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d14:	6011      	str	r1, [r2, #0]
 8001d16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d1a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	fa92 f1a2 	rbit	r1, r2
 8001d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d28:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d2c:	6011      	str	r1, [r2, #0]
  return result;
 8001d2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d32:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d082      	beq.n	8001c5a <HAL_RCC_OscConfig+0xdce>
 8001d54:	e0cf      	b.n	8001ef6 <HAL_RCC_OscConfig+0x106a>
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d68:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d7a:	601a      	str	r2, [r3, #0]
  return result;
 8001d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d80:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	461a      	mov	r2, r3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7fe fd40 	bl	8000820 <HAL_GetTick>
 8001da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	e009      	b.n	8001dba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe fd3b 	bl	8000820 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e09e      	b.n	8001ef8 <HAL_RCC_OscConfig+0x106c>
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dcc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	fa93 f2a3 	rbit	r2, r3
 8001dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dde:	601a      	str	r2, [r3, #0]
  return result;
 8001de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001de8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dea:	fab3 f383 	clz	r3, r3
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d104      	bne.n	8001e08 <HAL_RCC_OscConfig+0xf7c>
 8001dfe:	4b01      	ldr	r3, [pc, #4]	; (8001e04 <HAL_RCC_OscConfig+0xf78>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	e029      	b.n	8001e58 <HAL_RCC_OscConfig+0xfcc>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f2a3 	rbit	r2, r3
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e32:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e40:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <HAL_RCC_OscConfig+0x1078>)
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e64:	6011      	str	r1, [r2, #0]
 8001e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e6a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fa92 f1a2 	rbit	r1, r2
 8001e74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e78:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e7c:	6011      	str	r1, [r2, #0]
  return result;
 8001e7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e82:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	fab2 f282 	clz	r2, r2
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	f042 0220 	orr.w	r2, r2, #32
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	f002 021f 	and.w	r2, r2, #31
 8001e98:	2101      	movs	r1, #1
 8001e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d180      	bne.n	8001da6 <HAL_RCC_OscConfig+0xf1a>
 8001ea4:	e027      	b.n	8001ef6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e01e      	b.n	8001ef8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_OscConfig+0x1078>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ec6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001eda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ede:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b09e      	sub	sp, #120	; 0x78
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e162      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b90      	ldr	r3, [pc, #576]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d910      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b8d      	ldr	r3, [pc, #564]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 0207 	bic.w	r2, r3, #7
 8001f36:	498b      	ldr	r1, [pc, #556]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e14a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b82      	ldr	r3, [pc, #520]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	497f      	ldr	r1, [pc, #508]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80dc 	beq.w	8002134 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d13c      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xf6>
 8001f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f8c:	fa93 f3a3 	rbit	r3, r3
 8001f90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <HAL_RCC_ClockConfig+0xa6>
 8001fa8:	4b6f      	ldr	r3, [pc, #444]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e00f      	b.n	8001fce <HAL_RCC_ClockConfig+0xc6>
 8001fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
 8001fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fc4:	fa93 f3a3 	rbit	r3, r3
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fca:	4b67      	ldr	r3, [pc, #412]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fd6:	fa92 f2a2 	rbit	r2, r2
 8001fda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f002 021f 	and.w	r2, r2, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d17b      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0f3      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d13c      	bne.n	8002080 <HAL_RCC_ClockConfig+0x178>
 8002006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_RCC_ClockConfig+0x128>
 800202a:	4b4f      	ldr	r3, [pc, #316]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	e00f      	b.n	8002050 <HAL_RCC_ClockConfig+0x148>
 8002030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002034:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	643b      	str	r3, [r7, #64]	; 0x40
 8002044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204c:	4b46      	ldr	r3, [pc, #280]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002054:	63ba      	str	r2, [r7, #56]	; 0x38
 8002056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002058:	fa92 f2a2 	rbit	r2, r2
 800205c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800205e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002060:	fab2 f282 	clz	r2, r2
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f042 0220 	orr.w	r2, r2, #32
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	f002 021f 	and.w	r2, r2, #31
 8002070:	2101      	movs	r1, #1
 8002072:	fa01 f202 	lsl.w	r2, r1, r2
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d13a      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b2      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
 8002080:	2302      	movs	r3, #2
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x1a0>
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e00d      	b.n	80020c4 <HAL_RCC_ClockConfig+0x1bc>
 80020a8:	2302      	movs	r3, #2
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	2302      	movs	r3, #2
 80020b6:	623b      	str	r3, [r7, #32]
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	4b29      	ldr	r3, [pc, #164]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	2202      	movs	r2, #2
 80020c6:	61ba      	str	r2, [r7, #24]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	617a      	str	r2, [r7, #20]
  return result;
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e079      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	491a      	ldr	r1, [pc, #104]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7fe fb8c 	bl	8000820 <HAL_GetTick>
 8002108:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe fb88 	bl	8000820 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e061      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_RCC_ClockConfig+0x260>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d214      	bcs.n	800216c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4906      	ldr	r1, [pc, #24]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_ClockConfig+0x25c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e040      	b.n	80021e6 <HAL_RCC_ClockConfig+0x2de>
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	491a      	ldr	r1, [pc, #104]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4912      	ldr	r1, [pc, #72]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021aa:	f000 f829 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021ae:	4601      	mov	r1, r0
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_RCC_ClockConfig+0x2e8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b8:	22f0      	movs	r2, #240	; 0xf0
 80021ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	fa92 f2a2 	rbit	r2, r2
 80021c2:	60fa      	str	r2, [r7, #12]
  return result;
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	40d3      	lsrs	r3, r2
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x2ec>)
 80021d0:	5cd3      	ldrb	r3, [r2, r3]
 80021d2:	fa21 f303 	lsr.w	r3, r1, r3
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_RCC_ClockConfig+0x2f0>)
 80021d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_RCC_ClockConfig+0x2f4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fada 	bl	8000798 <HAL_InitTick>
  
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3778      	adds	r7, #120	; 0x78
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08003ba8 	.word	0x08003ba8
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b08b      	sub	sp, #44	; 0x2c
 8002204:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x30>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x36>
 800222e:	e03c      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002232:	623b      	str	r3, [r7, #32]
      break;
 8002234:	e03c      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800223c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002240:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	607a      	str	r2, [r7, #4]
  return result;
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	fab2 f282 	clz	r2, r2
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	40d3      	lsrs	r3, r2
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	220f      	movs	r2, #15
 8002264:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	fa92 f2a2 	rbit	r2, r2
 800226c:	60fa      	str	r2, [r7, #12]
  return result;
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	fab2 f282 	clz	r2, r2
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	40d3      	lsrs	r3, r2
 8002278:	4a14      	ldr	r2, [pc, #80]	; (80022cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	e004      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	623b      	str	r3, [r7, #32]
      break;
 80022a8:	e002      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ac:	623b      	str	r3, [r7, #32]
      break;
 80022ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b0:	6a3b      	ldr	r3, [r7, #32]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	372c      	adds	r7, #44	; 0x2c
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	08003bc0 	.word	0x08003bc0
 80022cc:	08003bd0 	.word	0x08003bd0
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022f2:	f7ff ffef 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 80022f6:	4601      	mov	r1, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002300:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002304:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	fa92 f2a2 	rbit	r2, r2
 800230c:	603a      	str	r2, [r7, #0]
  return result;
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	40d3      	lsrs	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x40>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	08003bb8 	.word	0x08003bb8

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002336:	f7ff ffcd 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800233a:	4601      	mov	r1, r0
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002344:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002348:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	fa92 f2a2 	rbit	r2, r2
 8002350:	603a      	str	r2, [r7, #0]
  return result;
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	fab2 f282 	clz	r2, r2
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	40d3      	lsrs	r3, r2
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x40>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	08003bb8 	.word	0x08003bb8

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b092      	sub	sp, #72	; 0x48
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 80cd 	beq.w	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002398:	4b8e      	ldr	r3, [pc, #568]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10e      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b8b      	ldr	r3, [pc, #556]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a8a      	ldr	r2, [pc, #552]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
 80023b0:	4b88      	ldr	r3, [pc, #544]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b82      	ldr	r3, [pc, #520]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a81      	ldr	r2, [pc, #516]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7fe fa21 	bl	8000820 <HAL_GetTick>
 80023de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe fa1d 	bl	8000820 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0ea      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b78      	ldr	r3, [pc, #480]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002400:	4b74      	ldr	r3, [pc, #464]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800240a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240c:	2b00      	cmp	r3, #0
 800240e:	d07d      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002418:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800241a:	429a      	cmp	r2, r3
 800241c:	d076      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800241e:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	4b66      	ldr	r3, [pc, #408]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002442:	4413      	add	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	461a      	mov	r2, r3
 8002448:	2301      	movs	r3, #1
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800245a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	4b5d      	ldr	r3, [pc, #372]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	2300      	movs	r3, #0
 800246e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002470:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002474:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d045      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7fe f9ce 	bl	8000820 <HAL_GetTick>
 8002484:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	e00a      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7fe f9ca 	bl	8000820 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e095      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x256>
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	2302      	movs	r3, #2
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	61fb      	str	r3, [r7, #28]
  return result;
 80024b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d102      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80024cc:	4b41      	ldr	r3, [pc, #260]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	e007      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2202      	movs	r2, #2
 80024e4:	613a      	str	r2, [r7, #16]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	fa92 f2a2 	rbit	r2, r2
 80024ec:	60fa      	str	r2, [r7, #12]
  return result;
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f002 021f 	and.w	r2, r2, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0bd      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800250c:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	492e      	ldr	r1, [pc, #184]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	4313      	orrs	r3, r2
 800251c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002522:	2b01      	cmp	r3, #1
 8002524:	d105      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d008      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4922      	ldr	r1, [pc, #136]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	4313      	orrs	r3, r2
 800254e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f023 0210 	bic.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	491a      	ldr	r1, [pc, #104]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	4313      	orrs	r3, r2
 800256c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4913      	ldr	r1, [pc, #76]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	4313      	orrs	r3, r2
 800258a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	490b      	ldr	r1, [pc, #44]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	4904      	ldr	r1, [pc, #16]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3748      	adds	r7, #72	; 0x48
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40007000 	.word	0x40007000
 80025dc:	10908100 	.word	0x10908100

080025e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e040      	b.n	8002674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fd ffac 	bl	8000560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fbca 	bl	8002db8 <UART_SetConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e022      	b.n	8002674 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fcf4 	bl	8003024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800264a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fd7b 	bl	8003168 <UART_CheckIdleState>
 8002672:	4603      	mov	r3, r0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800267c:	b480      	push	{r7}
 800267e:	b08b      	sub	sp, #44	; 0x2c
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800268e:	2b20      	cmp	r3, #32
 8002690:	d147      	bne.n	8002722 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_UART_Transmit_IT+0x22>
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e040      	b.n	8002724 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	88fa      	ldrh	r2, [r7, #6]
 80026b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2221      	movs	r2, #33	; 0x21
 80026ca:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d4:	d107      	bne.n	80026e6 <HAL_UART_Transmit_IT+0x6a>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4a13      	ldr	r2, [pc, #76]	; (8002730 <HAL_UART_Transmit_IT+0xb4>)
 80026e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80026e4:	e002      	b.n	80026ec <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a12      	ldr	r2, [pc, #72]	; (8002734 <HAL_UART_Transmit_IT+0xb8>)
 80026ea:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	613b      	str	r3, [r7, #16]
   return(result);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270e:	69f9      	ldr	r1, [r7, #28]
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	e841 2300 	strex	r3, r2, [r1]
 8002716:	61bb      	str	r3, [r7, #24]
   return(result);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e6      	bne.n	80026ec <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	372c      	adds	r7, #44	; 0x2c
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	080036c1 	.word	0x080036c1
 8002734:	08003609 	.word	0x08003609

08002738 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274c:	2b20      	cmp	r3, #32
 800274e:	d132      	bne.n	80027b6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_UART_Receive_IT+0x24>
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e02b      	b.n	80027b8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d018      	beq.n	80027a6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	613b      	str	r3, [r7, #16]
   return(result);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	623b      	str	r3, [r7, #32]
 8002794:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	69f9      	ldr	r1, [r7, #28]
 8002798:	6a3a      	ldr	r2, [r7, #32]
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	61bb      	str	r3, [r7, #24]
   return(result);
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e6      	bne.n	8002774 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fdeb 	bl	8003388 <UART_Start_Receive_IT>
 80027b2:	4603      	mov	r3, r0
 80027b4:	e000      	b.n	80027b8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b0ba      	sub	sp, #232	; 0xe8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80027ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80027ee:	4013      	ands	r3, r2
 80027f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80027f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d115      	bne.n	8002828 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00f      	beq.n	8002828 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 82ab 	beq.w	8002d74 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
      }
      return;
 8002826:	e2a5      	b.n	8002d74 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8117 	beq.w	8002a60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800283e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002842:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <HAL_UART_IRQHandler+0x298>)
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 810a 	beq.w	8002a60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800284c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d011      	beq.n	800287c <HAL_UART_IRQHandler+0xbc>
 8002858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d011      	beq.n	80028ac <HAL_UART_IRQHandler+0xec>
 8002888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2202      	movs	r2, #2
 800289a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a2:	f043 0204 	orr.w	r2, r3, #4
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d011      	beq.n	80028dc <HAL_UART_IRQHandler+0x11c>
 80028b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00b      	beq.n	80028dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2204      	movs	r2, #4
 80028ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d105      	bne.n	8002900 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80028f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2208      	movs	r2, #8
 8002906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290e:	f043 0208 	orr.w	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_UART_IRQHandler+0x18a>
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002938:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8211 	beq.w	8002d78 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d005      	beq.n	80029a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800299a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04f      	beq.n	8002a42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fdb6 	bl	8003514 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d141      	bne.n	8002a3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3308      	adds	r3, #8
 80029bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3308      	adds	r3, #8
 80029de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80029ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80029fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1d9      	bne.n	80029b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d013      	beq.n	8002a32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <HAL_UART_IRQHandler+0x29c>)
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f858 	bl	8000acc <HAL_DMA_Abort_IT>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d017      	beq.n	8002a52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a30:	e00f      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f9aa 	bl	8002d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	e00b      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9a6 	bl	8002d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a40:	e007      	b.n	8002a52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9a2 	bl	8002d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002a50:	e192      	b.n	8002d78 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a52:	bf00      	nop
    return;
 8002a54:	e190      	b.n	8002d78 <HAL_UART_IRQHandler+0x5b8>
 8002a56:	bf00      	nop
 8002a58:	04000120 	.word	0x04000120
 8002a5c:	080035dd 	.word	0x080035dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 814b 	bne.w	8002d00 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8144 	beq.w	8002d00 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 813d 	beq.w	8002d00 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2210      	movs	r2, #16
 8002a8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	f040 80b5 	bne.w	8002c08 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002aaa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 8164 	beq.w	8002d7c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	f080 815c 	bcs.w	8002d7c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	f000 8086 	beq.w	8002be6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002aee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002af6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b14:	e841 2300 	strex	r3, r2, [r1]
 8002b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1da      	bne.n	8002ada <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3308      	adds	r3, #8
 8002b2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2e:	e853 3f00 	ldrex	r3, [r3]
 8002b32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3308      	adds	r3, #8
 8002b44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e1      	bne.n	8002b24 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3308      	adds	r3, #8
 8002b66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e3      	bne.n	8002b60 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	e853 3f00 	ldrex	r3, [r3]
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb6:	f023 0310 	bic.w	r3, r3, #16
 8002bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002bca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e4      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd ff3a 	bl	8000a5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f8cd 	bl	8002da0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c06:	e0b9      	b.n	8002d7c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80ab 	beq.w	8002d80 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 80a6 	beq.w	8002d80 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c56:	647b      	str	r3, [r7, #68]	; 0x44
 8002c58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1e4      	bne.n	8002c34 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	623b      	str	r3, [r7, #32]
   return(result);
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3308      	adds	r3, #8
 8002c8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c8e:	633a      	str	r2, [r7, #48]	; 0x30
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e3      	bne.n	8002c6a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	e853 3f00 	ldrex	r3, [r3]
 8002cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0310 	bic.w	r3, r3, #16
 8002cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	69b9      	ldr	r1, [r7, #24]
 8002cde:	69fa      	ldr	r2, [r7, #28]
 8002ce0:	e841 2300 	strex	r3, r2, [r1]
 8002ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e4      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f851 	bl	8002da0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cfe:	e03f      	b.n	8002d80 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <HAL_UART_IRQHandler+0x56a>
 8002d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fefe 	bl	8003b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d28:	e02d      	b.n	8002d86 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01c      	beq.n	8002d84 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
    }
    return;
 8002d52:	e017      	b.n	8002d84 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <HAL_UART_IRQHandler+0x5c6>
 8002d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00c      	beq.n	8002d86 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fd07 	bl	8003780 <UART_EndTransmit_IT>
    return;
 8002d72:	e008      	b.n	8002d86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d74:	bf00      	nop
 8002d76:	e006      	b.n	8002d86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002d78:	bf00      	nop
 8002d7a:	e004      	b.n	8002d86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d7c:	bf00      	nop
 8002d7e:	e002      	b.n	8002d86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002d80:	bf00      	nop
 8002d82:	e000      	b.n	8002d86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002d84:	bf00      	nop
  }

}
 8002d86:	37e8      	adds	r7, #232	; 0xe8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b8a      	ldr	r3, [pc, #552]	; (800300c <UART_SetConfig+0x254>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	6979      	ldr	r1, [r7, #20]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a78      	ldr	r2, [pc, #480]	; (8003010 <UART_SetConfig+0x258>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xbe>
 8002e34:	4b77      	ldr	r3, [pc, #476]	; (8003014 <UART_SetConfig+0x25c>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d817      	bhi.n	8002e70 <UART_SetConfig+0xb8>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0x90>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e6b 	.word	0x08002e6b
 8002e54:	08002e5f 	.word	0x08002e5f
 8002e58:	2300      	movs	r3, #0
 8002e5a:	77fb      	strb	r3, [r7, #31]
 8002e5c:	e01d      	b.n	8002e9a <UART_SetConfig+0xe2>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	77fb      	strb	r3, [r7, #31]
 8002e62:	e01a      	b.n	8002e9a <UART_SetConfig+0xe2>
 8002e64:	2304      	movs	r3, #4
 8002e66:	77fb      	strb	r3, [r7, #31]
 8002e68:	e017      	b.n	8002e9a <UART_SetConfig+0xe2>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	77fb      	strb	r3, [r7, #31]
 8002e6e:	e014      	b.n	8002e9a <UART_SetConfig+0xe2>
 8002e70:	2310      	movs	r3, #16
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	e011      	b.n	8002e9a <UART_SetConfig+0xe2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a67      	ldr	r2, [pc, #412]	; (8003018 <UART_SetConfig+0x260>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d102      	bne.n	8002e86 <UART_SetConfig+0xce>
 8002e80:	2300      	movs	r3, #0
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e009      	b.n	8002e9a <UART_SetConfig+0xe2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a64      	ldr	r2, [pc, #400]	; (800301c <UART_SetConfig+0x264>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d102      	bne.n	8002e96 <UART_SetConfig+0xde>
 8002e90:	2300      	movs	r3, #0
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e001      	b.n	8002e9a <UART_SetConfig+0xe2>
 8002e96:	2310      	movs	r3, #16
 8002e98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ea2:	d15a      	bne.n	8002f5a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002ea4:	7ffb      	ldrb	r3, [r7, #31]
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d827      	bhi.n	8002efa <UART_SetConfig+0x142>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <UART_SetConfig+0xf8>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002ed5 	.word	0x08002ed5
 8002eb4:	08002edd 	.word	0x08002edd
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	08002efb 	.word	0x08002efb
 8002ec0:	08002eeb 	.word	0x08002eeb
 8002ec4:	08002efb 	.word	0x08002efb
 8002ec8:	08002efb 	.word	0x08002efb
 8002ecc:	08002efb 	.word	0x08002efb
 8002ed0:	08002ef3 	.word	0x08002ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed4:	f7ff fa0a 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002ed8:	61b8      	str	r0, [r7, #24]
        break;
 8002eda:	e013      	b.n	8002f04 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002edc:	f7ff fa28 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8002ee0:	61b8      	str	r0, [r7, #24]
        break;
 8002ee2:	e00f      	b.n	8002f04 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee4:	4b4e      	ldr	r3, [pc, #312]	; (8003020 <UART_SetConfig+0x268>)
 8002ee6:	61bb      	str	r3, [r7, #24]
        break;
 8002ee8:	e00c      	b.n	8002f04 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eea:	f7ff f989 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 8002eee:	61b8      	str	r0, [r7, #24]
        break;
 8002ef0:	e008      	b.n	8002f04 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef6:	61bb      	str	r3, [r7, #24]
        break;
 8002ef8:	e004      	b.n	8002f04 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	77bb      	strb	r3, [r7, #30]
        break;
 8002f02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d074      	beq.n	8002ff4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	005a      	lsls	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	441a      	add	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b0f      	cmp	r3, #15
 8002f24:	d916      	bls.n	8002f54 <UART_SetConfig+0x19c>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d212      	bcs.n	8002f54 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f023 030f 	bic.w	r3, r3, #15
 8002f36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	89fb      	ldrh	r3, [r7, #14]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	89fa      	ldrh	r2, [r7, #14]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e04f      	b.n	8002ff4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	77bb      	strb	r3, [r7, #30]
 8002f58:	e04c      	b.n	8002ff4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d828      	bhi.n	8002fb2 <UART_SetConfig+0x1fa>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <UART_SetConfig+0x1b0>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f8d 	.word	0x08002f8d
 8002f6c:	08002f95 	.word	0x08002f95
 8002f70:	08002f9d 	.word	0x08002f9d
 8002f74:	08002fb3 	.word	0x08002fb3
 8002f78:	08002fa3 	.word	0x08002fa3
 8002f7c:	08002fb3 	.word	0x08002fb3
 8002f80:	08002fb3 	.word	0x08002fb3
 8002f84:	08002fb3 	.word	0x08002fb3
 8002f88:	08002fab 	.word	0x08002fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7ff f9ae 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8002f90:	61b8      	str	r0, [r7, #24]
        break;
 8002f92:	e013      	b.n	8002fbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f94:	f7ff f9cc 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8002f98:	61b8      	str	r0, [r7, #24]
        break;
 8002f9a:	e00f      	b.n	8002fbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <UART_SetConfig+0x268>)
 8002f9e:	61bb      	str	r3, [r7, #24]
        break;
 8002fa0:	e00c      	b.n	8002fbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa2:	f7ff f92d 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 8002fa6:	61b8      	str	r0, [r7, #24]
        break;
 8002fa8:	e008      	b.n	8002fbc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fae:	61bb      	str	r3, [r7, #24]
        break;
 8002fb0:	e004      	b.n	8002fbc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	77bb      	strb	r3, [r7, #30]
        break;
 8002fba:	bf00      	nop
    }

    if (pclk != 0U)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	085a      	lsrs	r2, r3, #1
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	441a      	add	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d909      	bls.n	8002ff0 <UART_SetConfig+0x238>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe2:	d205      	bcs.n	8002ff0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	e001      	b.n	8002ff4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003000:	7fbb      	ldrb	r3, [r7, #30]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	efff69f3 	.word	0xefff69f3
 8003010:	40013800 	.word	0x40013800
 8003014:	40021000 	.word	0x40021000
 8003018:	40004400 	.word	0x40004400
 800301c:	40004800 	.word	0x40004800
 8003020:	007a1200 	.word	0x007a1200

08003024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01a      	beq.n	800313a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003122:	d10a      	bne.n	800313a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  }
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b098      	sub	sp, #96	; 0x60
 800316c:	af02      	add	r7, sp, #8
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003178:	f7fd fb52 	bl	8000820 <HAL_GetTick>
 800317c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b08      	cmp	r3, #8
 800318a:	d12e      	bne.n	80031ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800318c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003194:	2200      	movs	r2, #0
 8003196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f88c 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d021      	beq.n	80031ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ba:	653b      	str	r3, [r7, #80]	; 0x50
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
 80031c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e6      	bne.n	80031a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e062      	b.n	80032b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d149      	bne.n	800328c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003200:	2200      	movs	r2, #0
 8003202:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f856 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d03c      	beq.n	800328c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	e853 3f00 	ldrex	r3, [r3]
 800321e:	623b      	str	r3, [r7, #32]
   return(result);
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
 8003232:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003238:	e841 2300 	strex	r3, r2, [r1]
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e6      	bne.n	8003212 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3308      	adds	r3, #8
 800324a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	60fb      	str	r3, [r7, #12]
   return(result);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	64bb      	str	r3, [r7, #72]	; 0x48
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3308      	adds	r3, #8
 8003262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003264:	61fa      	str	r2, [r7, #28]
 8003266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003268:	69b9      	ldr	r1, [r7, #24]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	e841 2300 	strex	r3, r2, [r1]
 8003270:	617b      	str	r3, [r7, #20]
   return(result);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e5      	bne.n	8003244 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e011      	b.n	80032b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3758      	adds	r7, #88	; 0x58
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c8:	e049      	b.n	800335e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d0:	d045      	beq.n	800335e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fd faa5 	bl	8000820 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e048      	b.n	800337e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d031      	beq.n	800335e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d110      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2208      	movs	r2, #8
 800330e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f8ff 	bl	8003514 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2208      	movs	r2, #8
 800331a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e029      	b.n	800337e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003338:	d111      	bne.n	800335e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f8e5 	bl	8003514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e00f      	b.n	800337e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4013      	ands	r3, r2
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	429a      	cmp	r2, r3
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	429a      	cmp	r2, r3
 800337a:	d0a6      	beq.n	80032ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003388:	b480      	push	{r7}
 800338a:	b097      	sub	sp, #92	; 0x5c
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	d10e      	bne.n	80033da <UART_Start_Receive_IT+0x52>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <UART_Start_Receive_IT+0x48>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033ce:	e02d      	b.n	800342c <UART_Start_Receive_IT+0xa4>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033d8:	e028      	b.n	800342c <UART_Start_Receive_IT+0xa4>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10d      	bne.n	80033fe <UART_Start_Receive_IT+0x76>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <UART_Start_Receive_IT+0x6c>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033f2:	e01b      	b.n	800342c <UART_Start_Receive_IT+0xa4>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	227f      	movs	r2, #127	; 0x7f
 80033f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033fc:	e016      	b.n	800342c <UART_Start_Receive_IT+0xa4>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003406:	d10d      	bne.n	8003424 <UART_Start_Receive_IT+0x9c>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <UART_Start_Receive_IT+0x92>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	227f      	movs	r2, #127	; 0x7f
 8003414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003418:	e008      	b.n	800342c <UART_Start_Receive_IT+0xa4>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	223f      	movs	r2, #63	; 0x3f
 800341e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003422:	e003      	b.n	800342c <UART_Start_Receive_IT+0xa4>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2222      	movs	r2, #34	; 0x22
 8003438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3308      	adds	r3, #8
 8003442:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	e853 3f00 	ldrex	r3, [r3]
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	657b      	str	r3, [r7, #84]	; 0x54
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3308      	adds	r3, #8
 800345a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800345c:	64ba      	str	r2, [r7, #72]	; 0x48
 800345e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003464:	e841 2300 	strex	r3, r2, [r1]
 8003468:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800346a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e5      	bne.n	800343c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003478:	d107      	bne.n	800348a <UART_Start_Receive_IT+0x102>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d103      	bne.n	800348a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a21      	ldr	r2, [pc, #132]	; (800350c <UART_Start_Receive_IT+0x184>)
 8003486:	669a      	str	r2, [r3, #104]	; 0x68
 8003488:	e002      	b.n	8003490 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a20      	ldr	r2, [pc, #128]	; (8003510 <UART_Start_Receive_IT+0x188>)
 800348e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d019      	beq.n	80034cc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80034ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
 80034b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e6      	bne.n	8003498 <UART_Start_Receive_IT+0x110>
 80034ca:	e018      	b.n	80034fe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	613b      	str	r3, [r7, #16]
   return(result);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f043 0320 	orr.w	r3, r3, #32
 80034e0:	653b      	str	r3, [r7, #80]	; 0x50
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ea:	623b      	str	r3, [r7, #32]
 80034ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	69f9      	ldr	r1, [r7, #28]
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e6      	bne.n	80034cc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	375c      	adds	r7, #92	; 0x5c
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	0800397d 	.word	0x0800397d
 8003510:	080037d5 	.word	0x080037d5

08003514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b095      	sub	sp, #84	; 0x54
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353a:	643b      	str	r3, [r7, #64]	; 0x40
 800353c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e6      	bne.n	800351c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3308      	adds	r3, #8
 8003554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	e853 3f00 	ldrex	r3, [r3]
 800355c:	61fb      	str	r3, [r7, #28]
   return(result);
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3308      	adds	r3, #8
 800356c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800356e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e5      	bne.n	800354e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003586:	2b01      	cmp	r3, #1
 8003588:	d118      	bne.n	80035bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60bb      	str	r3, [r7, #8]
   return(result);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	647b      	str	r3, [r7, #68]	; 0x44
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6979      	ldr	r1, [r7, #20]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	613b      	str	r3, [r7, #16]
   return(result);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e6      	bne.n	800358a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035d0:	bf00      	nop
 80035d2:	3754      	adds	r7, #84	; 0x54
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7ff fbc6 	bl	8002d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003608:	b480      	push	{r7}
 800360a:	b08f      	sub	sp, #60	; 0x3c
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003614:	2b21      	cmp	r3, #33	; 0x21
 8003616:	d14d      	bne.n	80036b4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d132      	bne.n	800368a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	61fb      	str	r3, [r7, #28]
   return(result);
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003644:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e6      	bne.n	8003624 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	60bb      	str	r3, [r7, #8]
   return(result);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366a:	633b      	str	r3, [r7, #48]	; 0x30
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6979      	ldr	r1, [r7, #20]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	613b      	str	r3, [r7, #16]
   return(result);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e6      	bne.n	8003656 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003688:	e014      	b.n	80036b4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b292      	uxth	r2, r2
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80036b4:	bf00      	nop
 80036b6:	373c      	adds	r7, #60	; 0x3c
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b091      	sub	sp, #68	; 0x44
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036cc:	2b21      	cmp	r3, #33	; 0x21
 80036ce:	d151      	bne.n	8003774 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d132      	bne.n	8003742 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	623b      	str	r3, [r7, #32]
   return(result);
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
 80036fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e6      	bne.n	80036dc <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	60fb      	str	r3, [r7, #12]
   return(result);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	69b9      	ldr	r1, [r7, #24]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	617b      	str	r3, [r7, #20]
   return(result);
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e6      	bne.n	800370e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003740:	e018      	b.n	8003774 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003754:	b292      	uxth	r2, r2
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375c:	1c9a      	adds	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003774:	bf00      	nop
 8003776:	3744      	adds	r7, #68	; 0x44
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	60bb      	str	r3, [r7, #8]
   return(result);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6979      	ldr	r1, [r7, #20]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	613b      	str	r3, [r7, #16]
   return(result);
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e6      	bne.n	8003788 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fc fe68 	bl	800049c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b09c      	sub	sp, #112	; 0x70
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80037e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ec:	2b22      	cmp	r3, #34	; 0x22
 80037ee:	f040 80b9 	bne.w	8003964 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80037fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003800:	b2d9      	uxtb	r1, r3
 8003802:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003806:	b2da      	uxtb	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	400a      	ands	r2, r1
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 809c 	bne.w	8003974 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800384a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003850:	66bb      	str	r3, [r7, #104]	; 0x68
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800385a:	65bb      	str	r3, [r7, #88]	; 0x58
 800385c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e6      	bne.n	800383c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3308      	adds	r3, #8
 8003874:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	667b      	str	r3, [r7, #100]	; 0x64
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800388e:	647a      	str	r2, [r7, #68]	; 0x44
 8003890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e5      	bne.n	800386e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d018      	beq.n	80038f6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	623b      	str	r3, [r7, #32]
   return(result);
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038d8:	663b      	str	r3, [r7, #96]	; 0x60
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
 80038e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e6      	bne.n	80038c4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d12e      	bne.n	800395c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	60fb      	str	r3, [r7, #12]
   return(result);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f023 0310 	bic.w	r3, r3, #16
 8003918:	65fb      	str	r3, [r7, #92]	; 0x5c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	617b      	str	r3, [r7, #20]
   return(result);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e6      	bne.n	8003904 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b10      	cmp	r3, #16
 8003942:	d103      	bne.n	800394c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2210      	movs	r2, #16
 800394a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fa23 	bl	8002da0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800395a:	e00b      	b.n	8003974 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fc fd87 	bl	8000470 <HAL_UART_RxCpltCallback>
}
 8003962:	e007      	b.n	8003974 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	619a      	str	r2, [r3, #24]
}
 8003974:	bf00      	nop
 8003976:	3770      	adds	r7, #112	; 0x70
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b09c      	sub	sp, #112	; 0x70
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800398a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003994:	2b22      	cmp	r3, #34	; 0x22
 8003996:	f040 80b9 	bne.w	8003b0c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80039aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80039ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80039b2:	4013      	ands	r3, r2
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	1c9a      	adds	r2, r3, #2
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 809c 	bne.w	8003b1c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80039f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f8:	667b      	str	r3, [r7, #100]	; 0x64
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a02:	657b      	str	r3, [r7, #84]	; 0x54
 8003a04:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e6      	bne.n	80039e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3308      	adds	r3, #8
 8003a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a36:	643a      	str	r2, [r7, #64]	; 0x40
 8003a38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e5      	bne.n	8003a16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d018      	beq.n	8003a9e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a8c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e6      	bne.n	8003a6c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d12e      	bne.n	8003b04 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	e853 3f00 	ldrex	r3, [r3]
 8003ab8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f023 0310 	bic.w	r3, r3, #16
 8003ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e6      	bne.n	8003aac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d103      	bne.n	8003af4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2210      	movs	r2, #16
 8003af2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7ff f94f 	bl	8002da0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b02:	e00b      	b.n	8003b1c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fc fcb3 	bl	8000470 <HAL_UART_RxCpltCallback>
}
 8003b0a:	e007      	b.n	8003b1c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0208 	orr.w	r2, r2, #8
 8003b1a:	619a      	str	r2, [r3, #24]
}
 8003b1c:	bf00      	nop
 8003b1e:	3770      	adds	r7, #112	; 0x70
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <memset>:
 8003b38:	4402      	add	r2, r0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <memset+0xa>
 8003b40:	4770      	bx	lr
 8003b42:	f803 1b01 	strb.w	r1, [r3], #1
 8003b46:	e7f9      	b.n	8003b3c <memset+0x4>

08003b48 <__libc_init_array>:
 8003b48:	b570      	push	{r4, r5, r6, lr}
 8003b4a:	4d0d      	ldr	r5, [pc, #52]	; (8003b80 <__libc_init_array+0x38>)
 8003b4c:	4c0d      	ldr	r4, [pc, #52]	; (8003b84 <__libc_init_array+0x3c>)
 8003b4e:	1b64      	subs	r4, r4, r5
 8003b50:	10a4      	asrs	r4, r4, #2
 8003b52:	2600      	movs	r6, #0
 8003b54:	42a6      	cmp	r6, r4
 8003b56:	d109      	bne.n	8003b6c <__libc_init_array+0x24>
 8003b58:	4d0b      	ldr	r5, [pc, #44]	; (8003b88 <__libc_init_array+0x40>)
 8003b5a:	4c0c      	ldr	r4, [pc, #48]	; (8003b8c <__libc_init_array+0x44>)
 8003b5c:	f000 f818 	bl	8003b90 <_init>
 8003b60:	1b64      	subs	r4, r4, r5
 8003b62:	10a4      	asrs	r4, r4, #2
 8003b64:	2600      	movs	r6, #0
 8003b66:	42a6      	cmp	r6, r4
 8003b68:	d105      	bne.n	8003b76 <__libc_init_array+0x2e>
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b70:	4798      	blx	r3
 8003b72:	3601      	adds	r6, #1
 8003b74:	e7ee      	b.n	8003b54 <__libc_init_array+0xc>
 8003b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7a:	4798      	blx	r3
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	e7f2      	b.n	8003b66 <__libc_init_array+0x1e>
 8003b80:	08003be0 	.word	0x08003be0
 8003b84:	08003be0 	.word	0x08003be0
 8003b88:	08003be0 	.word	0x08003be0
 8003b8c:	08003be4 	.word	0x08003be4

08003b90 <_init>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr

08003b9c <_fini>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr
